
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 03 12:11:00 CEST 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 03 12:11:00 CEST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\003\004\000\002\003\007" +
    "\000\002\036\002\000\002\003\006\000\002\037\002\000" +
    "\002\040\002\000\002\003\012\000\002\041\002\000\002" +
    "\042\002\000\002\003\011\000\002\043\002\000\002\003" +
    "\012\000\002\044\002\000\002\045\002\000\002\046\002" +
    "\000\002\003\016\000\002\047\002\000\002\003\014\000" +
    "\002\050\002\000\002\003\014\000\002\003\003\000\002" +
    "\003\003\000\002\005\004\000\002\005\002\000\002\027" +
    "\003\000\002\030\003\000\002\031\003\000\002\012\004" +
    "\000\002\012\002\000\002\051\002\000\002\006\005\000" +
    "\002\006\005\000\002\010\003\000\002\010\005\000\002" +
    "\052\002\000\002\010\011\000\002\010\003\000\002\016" +
    "\006\000\002\016\002\000\002\053\002\000\002\014\007" +
    "\000\002\014\002\000\002\015\005\000\002\015\003\000" +
    "\002\007\003\000\002\007\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\006\000\002\004\010\000\002\054" +
    "\002\000\002\004\010\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\055\002\000" +
    "\002\056\002\000\002\057\002\000\002\004\012\000\002" +
    "\060\002\000\002\004\006\000\002\004\005\000\002\004" +
    "\006\000\002\004\006\000\002\004\003\000\002\032\003" +
    "\000\002\017\003\000\002\033\003\000\002\011\003\000" +
    "\002\013\003\000\002\013\003\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\004\000\002\061\002" +
    "\000\002\026\006\000\002\062\002\000\002\026\006\000" +
    "\002\026\005\000\002\063\002\000\002\022\013\000\002" +
    "\064\002\000\002\020\010\000\002\065\002\000\002\066" +
    "\002\000\002\020\012\000\002\067\002\000\002\021\006" +
    "\000\002\021\002\000\002\035\004\000\002\035\002\000" +
    "\002\025\003\000\002\025\002\000\002\034\003\000\002" +
    "\023\004\000\002\070\002\000\002\023\005\000\002\024" +
    "\004\000\002\071\002\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\052\002\uffff\004\uffff\006\uffff\010\uffff\017" +
    "\uffff\020\uffff\024\uffff\025\uffff\033\uffff\035\uffff\042\uffff" +
    "\043\uffff\044\uffff\052\uffff\061\uffff\062\uffff\063\uffff\066" +
    "\uffff\067\uffff\070\uffff\001\002\000\052\002\034\004\043" +
    "\006\025\010\015\017\006\020\024\024\040\025\013\033" +
    "\023\035\021\042\044\043\014\044\030\052\016\061\010" +
    "\062\033\063\036\066\007\067\026\070\037\001\002\000" +
    "\012\027\351\030\353\031\352\032\350\001\002\000\024" +
    "\006\025\017\006\020\024\024\040\025\013\052\016\066" +
    "\007\067\026\070\037\001\002\000\104\005\uffab\007\uffab" +
    "\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\041\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\050\uffab\051\uffab\053\uffab\054\uffab" +
    "\055\uffab\056\uffab\057\uffab\060\uffab\064\uffab\001\002\000" +
    "\006\020\uffd1\066\uffd1\001\002\000\024\006\312\017\006" +
    "\020\024\024\040\025\013\052\016\066\007\067\026\070" +
    "\037\001\002\000\006\020\uffe0\066\uffe0\001\002\000\004" +
    "\066\113\001\002\000\004\006\uffe5\001\002\000\052\004" +
    "\ufffb\006\ufffb\010\ufffb\011\ufffb\017\ufffb\020\ufffb\024\ufffb" +
    "\025\ufffb\033\ufffb\035\ufffb\042\ufffb\043\ufffb\044\ufffb\052" +
    "\ufffb\061\ufffb\062\ufffb\063\ufffb\066\ufffb\067\ufffb\070\ufffb" +
    "\001\002\000\024\006\025\017\006\020\024\024\040\025" +
    "\013\052\016\066\007\067\026\070\037\001\002\000\074" +
    "\005\uffc7\007\uffc7\011\uffc7\012\uffc7\013\265\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\266\024\264" +
    "\025\263\026\uffc7\041\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\064\uffc7\001\002\000\004\006\227\001" +
    "\002\000\004\006\uff8e\001\002\000\034\005\226\016\056" +
    "\017\050\020\053\021\061\026\052\053\063\054\065\055" +
    "\060\056\064\057\055\060\054\064\062\001\002\000\004" +
    "\006\215\001\002\000\006\020\uff89\066\113\001\002\000" +
    "\024\006\025\017\006\020\024\024\040\025\013\052\016" +
    "\066\007\067\026\070\037\001\002\000\074\005\uffc2\007" +
    "\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\026\uffc2\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\041\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\064\uffc2\001\002\000\010\041\122\050\124\051\120" +
    "\001\002\000\050\004\uffe4\006\uffe4\010\uffe4\017\uffe4\020" +
    "\uffe4\024\uffe4\025\uffe4\033\uffe4\035\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\052\uffe4\061\uffe4\062\uffe4\063\uffe4\066\uffe4\067" +
    "\uffe4\070\uffe4\001\002\000\006\005\152\012\151\001\002" +
    "\000\050\004\ufff3\006\ufff3\010\ufff3\017\ufff3\020\ufff3\024" +
    "\ufff3\025\ufff3\033\ufff3\035\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\052\ufff3\061\ufff3\062\ufff3\063\ufff3\066\ufff3\067\ufff3\070" +
    "\ufff3\001\002\000\006\020\uffd0\066\uffd0\001\002\000\004" +
    "\002\000\001\002\000\004\006\ufff6\001\002\000\064\002" +
    "\uffe9\004\uffe9\006\uffe9\010\uffe9\011\uffe9\017\uffe9\020\uffe9" +
    "\024\uffe9\025\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\052\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\066\uffe9\067\uffe9\070\uffe9\001\002\000" +
    "\064\005\uffc1\007\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\026\uffc1\041\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\064\uffc1\001" +
    "\002\000\004\066\113\001\002\000\066\005\uffaf\007\uffaf" +
    "\011\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\022\104\026\uffaf\041\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\064\uffaf\001\002\000\064" +
    "\002\uffe8\004\uffe8\006\uffe8\010\uffe8\011\uffe8\017\uffe8\020" +
    "\uffe8\024\uffe8\025\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\052\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\066\uffe8\067\uffe8\070\uffe8\001\002" +
    "\000\004\006\046\001\002\000\024\006\uffe3\017\uffe3\020" +
    "\uffe3\024\uffe3\025\uffe3\052\uffe3\066\uffe3\067\uffe3\070\uffe3" +
    "\001\002\000\054\002\001\004\001\006\001\010\001\011" +
    "\001\017\001\020\001\024\001\025\001\033\001\035\001" +
    "\042\001\043\001\044\001\052\001\061\001\062\001\063" +
    "\001\066\001\067\001\070\001\001\002\000\024\006\025" +
    "\017\006\020\024\024\040\025\013\052\016\066\007\067" +
    "\026\070\037\001\002\000\034\007\051\016\056\017\050" +
    "\020\053\021\061\026\052\053\063\054\065\055\060\056" +
    "\064\057\055\060\054\064\062\001\002\000\024\006\025" +
    "\017\006\020\024\024\040\025\013\052\016\066\007\067" +
    "\026\070\037\001\002\000\004\005\102\001\002\000\024" +
    "\006\025\017\006\020\024\024\040\025\013\052\016\066" +
    "\007\067\026\070\037\001\002\000\024\006\025\017\006" +
    "\020\024\024\040\025\013\052\016\066\007\067\026\070" +
    "\037\001\002\000\024\006\025\017\006\020\024\024\040" +
    "\025\013\052\016\066\007\067\026\070\037\001\002\000" +
    "\024\006\025\017\006\020\024\024\040\025\013\052\016" +
    "\066\007\067\026\070\037\001\002\000\024\006\025\017" +
    "\006\020\024\024\040\025\013\052\016\066\007\067\026" +
    "\070\037\001\002\000\024\006\uffb4\017\uffb4\020\uffb4\024" +
    "\uffb4\025\uffb4\052\uffb4\066\uffb4\067\uffb4\070\uffb4\001\002" +
    "\000\024\006\025\017\006\020\024\024\040\025\013\052" +
    "\016\066\007\067\026\070\037\001\002\000\024\006\025" +
    "\017\006\020\024\024\040\025\013\052\016\066\007\067" +
    "\026\070\037\001\002\000\024\006\uffac\017\uffac\020\uffac" +
    "\024\uffac\025\uffac\052\uffac\066\uffac\067\uffac\070\uffac\001" +
    "\002\000\024\006\025\017\006\020\024\024\040\025\013" +
    "\052\016\066\007\067\026\070\037\001\002\000\024\006" +
    "\025\017\006\020\024\024\040\025\013\052\016\066\007" +
    "\067\026\070\037\001\002\000\024\006\025\017\006\020" +
    "\024\024\040\025\013\052\016\066\007\067\026\070\037" +
    "\001\002\000\044\005\uffa7\007\uffa7\016\056\017\050\020" +
    "\053\021\061\026\052\041\uffa7\050\uffa7\051\uffa7\053\063" +
    "\054\065\055\060\056\064\057\055\060\054\064\062\001" +
    "\002\000\044\005\uffa5\007\uffa5\016\056\017\050\020\053" +
    "\021\061\026\052\041\uffa5\050\uffa5\051\uffa5\053\063\054" +
    "\065\055\060\056\064\057\055\060\054\064\062\001\002" +
    "\000\044\005\uffa8\007\uffa8\016\056\017\050\020\053\021" +
    "\061\026\052\041\uffa8\050\uffa8\051\uffa8\053\063\054\065" +
    "\055\060\056\064\057\055\060\054\064\062\001\002\000" +
    "\064\005\uffcc\007\uffcc\011\uffcc\012\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\026\uffcc\041\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\064\uffcc\001" +
    "\002\000\044\005\uffa4\007\uffa4\016\056\017\050\020\053" +
    "\021\061\026\052\041\uffa4\050\uffa4\051\uffa4\053\063\054" +
    "\065\055\060\056\064\057\055\060\054\064\062\001\002" +
    "\000\024\006\025\017\006\020\024\024\040\025\013\052" +
    "\016\066\007\067\026\070\037\001\002\000\064\005\uffb3" +
    "\007\uffb3\011\uffb3\012\uffb3\014\uffb3\015\uffb3\016\056\017" +
    "\050\020\053\021\061\026\052\041\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053\063\054\065\055" +
    "\060\056\064\057\055\060\054\064\062\001\002\000\064" +
    "\005\uffcf\007\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\053\021\061\026\052\041\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\064\uffcf\001\002" +
    "\000\044\005\uffa6\007\uffa6\016\056\017\050\020\053\021" +
    "\061\026\052\041\uffa6\050\uffa6\051\uffa6\053\063\054\065" +
    "\055\060\056\064\057\055\060\054\064\062\001\002\000" +
    "\044\005\uffa3\007\uffa3\016\056\017\050\020\053\021\061" +
    "\026\052\041\uffa3\050\uffa3\051\uffa3\053\063\054\065\055" +
    "\060\056\064\057\055\060\054\064\062\001\002\000\064" +
    "\005\uffcd\007\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\026\uffcd\041\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\064\uffcd\001\002" +
    "\000\064\005\uffcb\007\uffcb\011\uffcb\012\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\026\uffcb\041\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\064\uffcb" +
    "\001\002\000\064\002\ufffc\004\ufffc\006\ufffc\010\ufffc\011" +
    "\ufffc\017\ufffc\020\ufffc\024\ufffc\025\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\052\ufffc\061\ufffc\062\ufffc\063\ufffc\066\ufffc\067\ufffc" +
    "\070\ufffc\001\002\000\064\005\uffce\007\uffce\011\uffce\012" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\053\021\061" +
    "\026\052\041\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\064\uffce\001\002\000\026\006\025\017\006\020" +
    "\024\024\040\025\013\052\016\065\106\066\007\067\026" +
    "\070\037\001\002\000\064\005\uffb2\007\uffb2\011\uffb2\012" +
    "\uffb2\014\uffb2\015\uffb2\016\056\017\050\020\053\021\061" +
    "\026\052\041\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\053\063\054\065\055\060\056\064\057\055" +
    "\060\054\064\062\001\002\000\006\066\110\067\107\001" +
    "\002\000\064\005\uffa9\007\uffa9\011\uffa9\012\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\026\uffa9\041" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\064" +
    "\uffa9\001\002\000\064\005\uffaa\007\uffaa\011\uffaa\012\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\026" +
    "\uffaa\041\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\064\uffaa\001\002\000\064\005\uffb0\007\uffb0\011\uffb0" +
    "\012\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\026\uffb0\041\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0" +
    "\050\uffb0\051\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\064\uffb0\001\002\000\064\005\uffc6\007\uffc6" +
    "\011\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\026\uffc6\041\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\053\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\064\uffc6\001\002\000\066\005\uffab" +
    "\007\uffab\011\uffab\012\uffab\014\uffab\015\uffab\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\026\uffab\041\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\064\uffab\001\002" +
    "\000\004\006\115\001\002\000\024\006\025\017\006\020" +
    "\024\024\040\025\013\052\016\066\007\067\026\070\037" +
    "\001\002\000\032\016\056\017\050\020\053\021\061\026" +
    "\052\053\063\054\065\055\060\056\064\057\055\060\054" +
    "\064\062\001\002\000\012\007\123\041\122\050\124\051" +
    "\120\001\002\000\024\006\uffa1\017\uffa1\020\uffa1\024\uffa1" +
    "\025\uffa1\052\uffa1\066\uffa1\067\uffa1\070\uffa1\001\002\000" +
    "\024\006\uffb8\017\uffb8\020\uffb8\024\uffb8\025\uffb8\052\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\001\002\000\024\006\uffae\017" +
    "\uffae\020\uffae\024\uffae\025\uffae\052\uffae\066\uffae\067\uffae" +
    "\070\uffae\001\002\000\050\004\ufff5\006\ufff5\010\ufff5\017" +
    "\ufff5\020\ufff5\024\ufff5\025\ufff5\033\ufff5\035\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\052\ufff5\061\ufff5\062\ufff5\063\ufff5\066" +
    "\ufff5\067\ufff5\070\ufff5\001\002\000\024\006\uff9f\017\uff9f" +
    "\020\uff9f\024\uff9f\025\uff9f\052\uff9f\066\uff9f\067\uff9f\070" +
    "\uff9f\001\002\000\024\006\025\017\006\020\024\024\040" +
    "\025\013\052\016\066\007\067\026\070\037\001\002\000" +
    "\014\005\uff9e\007\uff9e\041\uff9e\050\uff9e\051\uff9e\001\002" +
    "\000\050\004\043\006\025\010\015\017\006\020\024\024" +
    "\040\025\013\033\023\035\021\042\044\043\014\044\030" +
    "\052\016\061\010\062\033\063\036\066\007\067\026\070" +
    "\037\001\002\000\064\002\ufff4\004\ufff4\006\ufff4\010\ufff4" +
    "\011\ufff4\017\ufff4\020\ufff4\024\ufff4\025\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\052\ufff4\061\ufff4\062\ufff4\063\ufff4\066\ufff4\067" +
    "\ufff4\070\ufff4\001\002\000\024\006\025\017\006\020\024" +
    "\024\040\025\013\052\016\066\007\067\026\070\037\001" +
    "\002\000\034\015\uffb7\016\056\017\050\020\053\021\061" +
    "\026\052\053\063\054\065\055\060\056\064\057\055\060" +
    "\054\064\062\001\002\000\004\015\134\001\002\000\024" +
    "\006\uffad\017\uffad\020\uffad\024\uffad\025\uffad\052\uffad\066" +
    "\uffad\067\uffad\070\uffad\001\002\000\024\006\uffb6\017\uffb6" +
    "\020\uffb6\024\uffb6\025\uffb6\052\uffb6\066\uffb6\067\uffb6\070" +
    "\uffb6\001\002\000\024\006\025\017\006\020\024\024\040" +
    "\025\013\052\016\066\007\067\026\070\037\001\002\000" +
    "\064\005\uffb5\007\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5" +
    "\016\056\017\050\020\053\021\061\026\052\041\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\053\063" +
    "\054\065\055\060\056\064\057\055\060\054\064\062\001" +
    "\002\000\024\006\025\017\006\020\024\024\040\025\013" +
    "\052\016\066\007\067\026\070\037\001\002\000\014\005" +
    "\uffa0\007\uffa0\041\uffa0\050\uffa0\051\uffa0\001\002\000\050" +
    "\004\043\006\025\010\015\017\006\020\024\024\040\025" +
    "\013\033\023\035\021\042\044\043\014\044\030\052\016" +
    "\061\010\062\033\063\036\066\007\067\026\070\037\001" +
    "\002\000\004\043\144\001\002\000\004\006\145\001\002" +
    "\000\024\006\025\017\006\020\024\024\040\025\013\052" +
    "\016\066\007\067\026\070\037\001\002\000\012\007\147" +
    "\041\122\050\124\051\120\001\002\000\004\005\150\001" +
    "\002\000\064\002\ufff2\004\ufff2\006\ufff2\010\ufff2\011\ufff2" +
    "\017\ufff2\020\ufff2\024\ufff2\025\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\042\ufff2\043\ufff2\044\ufff2" +
    "\052\ufff2\061\ufff2\062\ufff2\063\ufff2\066\ufff2\067\ufff2\070" +
    "\ufff2\001\002\000\006\020\156\066\155\001\002\000\064" +
    "\002\ufffd\004\ufffd\006\ufffd\010\ufffd\011\ufffd\017\ufffd\020" +
    "\ufffd\024\ufffd\025\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\042\ufffd\043\ufffd\044\ufffd\052\ufffd\061" +
    "\ufffd\062\ufffd\063\ufffd\066\ufffd\067\ufffd\070\ufffd\001\002" +
    "\000\006\005\uffd9\012\uffd9\001\002\000\006\005\uffde\012" +
    "\uffde\001\002\000\012\005\uffdd\012\uffdd\013\162\022\163" +
    "\001\002\000\006\020\uff8c\066\160\001\002\000\004\020" +
    "\156\001\002\000\006\005\uff8d\012\uff8d\001\002\000\006" +
    "\005\uff8b\012\uff8b\001\002\000\006\066\110\067\107\001" +
    "\002\000\024\006\025\017\006\020\024\024\040\025\013" +
    "\052\016\066\007\067\026\070\037\001\002\000\036\005" +
    "\uffdc\012\uffdc\016\056\017\050\020\053\021\061\026\052" +
    "\053\063\054\065\055\060\056\064\057\055\060\054\064" +
    "\062\001\002\000\004\014\166\001\002\000\012\005\uffd7" +
    "\012\uffd7\013\170\022\uffd7\001\002\000\010\005\uffdb\012" +
    "\uffdb\022\uffdb\001\002\000\006\066\110\067\107\001\002" +
    "\000\004\014\172\001\002\000\012\005\uffd7\012\uffd7\013" +
    "\170\022\uffd7\001\002\000\010\005\uffd8\012\uffd8\022\uffd8" +
    "\001\002\000\010\005\uffd4\012\uffd4\022\176\001\002\000" +
    "\006\005\uffda\012\uffda\001\002\000\004\010\uffd6\001\002" +
    "\000\004\010\200\001\002\000\024\006\025\017\006\020" +
    "\024\024\040\025\013\052\016\066\007\067\026\070\037" +
    "\001\002\000\006\011\204\012\203\001\002\000\036\011" +
    "\uffd2\012\uffd2\016\056\017\050\020\053\021\061\026\052" +
    "\053\063\054\065\055\060\056\064\057\055\060\054\064" +
    "\062\001\002\000\024\006\025\017\006\020\024\024\040" +
    "\025\013\052\016\066\007\067\026\070\037\001\002\000" +
    "\006\005\uffd5\012\uffd5\001\002\000\036\011\uffd3\012\uffd3" +
    "\016\056\017\050\020\053\021\061\026\052\053\063\054" +
    "\065\055\060\056\064\057\055\060\054\064\062\001\002" +
    "\000\034\007\211\016\056\017\050\020\053\021\061\026" +
    "\052\053\063\054\065\055\060\056\064\057\055\060\054" +
    "\064\062\001\002\000\012\007\210\041\122\050\124\051" +
    "\120\001\002\000\014\005\uff9d\007\uff9d\041\uff9d\050\uff9d" +
    "\051\uff9d\001\002\000\064\005\uffc8\007\uffc8\011\uffc8\012" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\026\uffc8\041\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\064\uffc8\001\002\000\066\005\uff8a\007\uff8a\011" +
    "\uff8a\012\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\026\uff8a\041\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\060\uff8a\064\uff8a\001\002\000\004\020" +
    "\024\001\002\000\066\005\uff88\007\uff88\011\uff88\012\uff88" +
    "\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022" +
    "\uff88\026\uff88\041\uff88\044\uff88\045\uff88\046\uff88\047\uff88" +
    "\050\uff88\051\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057" +
    "\uff88\060\uff88\064\uff88\001\002\000\024\006\025\017\006" +
    "\020\024\024\040\025\013\052\016\066\007\067\026\070" +
    "\037\001\002\000\012\007\217\041\122\050\124\051\120" +
    "\001\002\000\050\004\ufff9\006\ufff9\010\ufff9\017\ufff9\020" +
    "\ufff9\024\ufff9\025\ufff9\033\ufff9\035\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\052\ufff9\061\ufff9\062\ufff9\063\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\001\002\000\050\004\043\006\025\010\015" +
    "\017\006\020\024\024\040\025\013\033\023\035\021\042" +
    "\044\043\014\044\030\052\016\061\010\062\033\063\036" +
    "\066\007\067\026\070\037\001\002\000\064\002\ufff8\004" +
    "\ufff8\006\ufff8\010\ufff8\011\ufff8\017\ufff8\020\ufff8\024\ufff8" +
    "\025\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\052\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\066\ufff8\067\ufff8\070\ufff8\001\002\000\064\002" +
    "\uffe6\004\uffe6\006\uffe6\010\uffe6\011\uffe6\017\uffe6\020\uffe6" +
    "\024\uffe6\025\uffe6\033\uffe6\034\223\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\052\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\066\uffe6\067\uffe6\070\uffe6\001\002\000" +
    "\050\004\043\006\025\010\015\017\006\020\024\024\040" +
    "\025\013\033\023\035\021\042\044\043\014\044\030\052" +
    "\016\061\010\062\033\063\036\066\007\067\026\070\037" +
    "\001\002\000\064\002\ufff7\004\ufff7\006\ufff7\010\ufff7\011" +
    "\ufff7\017\ufff7\020\ufff7\024\ufff7\025\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\052\ufff7\061\ufff7\062\ufff7\063\ufff7\066\ufff7\067\ufff7" +
    "\070\ufff7\001\002\000\064\002\uffe7\004\uffe7\006\uffe7\010" +
    "\uffe7\011\uffe7\017\uffe7\020\uffe7\024\uffe7\025\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\052\uffe7\061\uffe7\062\uffe7\063\uffe7\066\uffe7" +
    "\067\uffe7\070\uffe7\001\002\000\064\002\ufffe\004\ufffe\006" +
    "\ufffe\010\ufffe\011\ufffe\017\ufffe\020\ufffe\024\ufffe\025\ufffe" +
    "\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\042" +
    "\ufffe\043\ufffe\044\ufffe\052\ufffe\061\ufffe\062\ufffe\063\ufffe" +
    "\066\ufffe\067\ufffe\070\ufffe\001\002\000\024\006\025\017" +
    "\006\020\024\024\040\025\013\052\016\066\007\067\026" +
    "\070\037\001\002\000\034\007\231\016\056\017\050\020" +
    "\053\021\061\026\052\053\063\054\065\055\060\056\064" +
    "\057\055\060\054\064\062\001\002\000\004\010\uff9c\001" +
    "\002\000\004\010\233\001\002\000\004\036\235\001\002" +
    "\000\010\011\uff93\036\250\040\246\001\002\000\024\006" +
    "\025\017\006\020\024\024\040\025\013\052\016\066\007" +
    "\067\026\070\037\001\002\000\034\015\uff9a\016\056\017" +
    "\050\020\053\021\061\026\052\053\063\054\065\055\060" +
    "\056\064\057\055\060\054\064\062\001\002\000\004\015" +
    "\240\001\002\000\060\004\043\006\025\010\015\011\uff8f" +
    "\017\006\020\024\024\040\025\013\033\023\035\021\036" +
    "\uff8f\037\uff8f\040\uff8f\042\044\043\014\044\030\052\016" +
    "\061\010\062\033\063\036\066\007\067\026\070\037\001" +
    "\002\000\012\011\uff91\036\uff91\037\243\040\uff91\001\002" +
    "\000\012\011\uff90\036\uff90\037\uff90\040\uff90\001\002\000" +
    "\004\005\245\001\002\000\010\011\uff99\036\uff99\040\uff99" +
    "\001\002\000\010\011\uff92\036\uff92\040\uff92\001\002\000" +
    "\004\015\260\001\002\000\004\011\257\001\002\000\024" +
    "\006\uff98\017\uff98\020\uff98\024\uff98\025\uff98\052\uff98\066" +
    "\uff98\067\uff98\070\uff98\001\002\000\024\006\025\017\006" +
    "\020\024\024\040\025\013\052\016\066\007\067\026\070" +
    "\037\001\002\000\034\015\uff97\016\056\017\050\020\053" +
    "\021\061\026\052\053\063\054\065\055\060\056\064\057" +
    "\055\060\054\064\062\001\002\000\004\015\254\001\002" +
    "\000\060\004\043\006\025\010\015\011\uff8f\017\006\020" +
    "\024\024\040\025\013\033\023\035\021\036\uff8f\037\uff8f" +
    "\040\uff8f\042\044\043\014\044\030\052\016\061\010\062" +
    "\033\063\036\066\007\067\026\070\037\001\002\000\012" +
    "\011\uff91\036\uff91\037\243\040\uff91\001\002\000\010\011" +
    "\uff96\036\uff96\040\uff96\001\002\000\064\002\uff9b\004\uff9b" +
    "\006\uff9b\010\uff9b\011\uff9b\017\uff9b\020\uff9b\024\uff9b\025" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\052\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\001\002\000\050\004\uff95" +
    "\006\uff95\010\uff95\017\uff95\020\uff95\024\uff95\025\uff95\033" +
    "\uff95\035\uff95\042\uff95\043\uff95\044\uff95\052\uff95\061\uff95" +
    "\062\uff95\063\uff95\066\uff95\067\uff95\070\uff95\001\002\000" +
    "\050\004\043\006\025\010\015\017\006\020\024\024\040" +
    "\025\013\033\023\035\021\042\044\043\014\044\030\052" +
    "\016\061\010\062\033\063\036\066\007\067\026\070\037" +
    "\001\002\000\004\011\uff94\001\002\000\064\005\uffc3\007" +
    "\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\026\uffc3\041\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\064\uffc3\001\002\000\064\005" +
    "\uffc5\007\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\026\uffc5\041\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\064\uffc5\001\002\000" +
    "\024\006\025\017\006\020\024\024\040\025\013\052\016" +
    "\066\007\067\026\070\037\001\002\000\030\006\025\010" +
    "\uffbe\017\006\020\024\024\040\025\013\052\016\065\271" +
    "\066\007\067\026\070\037\001\002\000\064\005\uffc9\007" +
    "\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\016\056\017\050" +
    "\020\053\021\061\026\052\041\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\053\063\054\065\055\060" +
    "\056\064\057\055\060\054\064\062\001\002\000\004\010" +
    "\273\001\002\000\006\066\110\067\107\001\002\000\064" +
    "\005\uffb1\007\uffb1\011\uffb1\012\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\026\uffb1\041\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\064\uffb1\001\002" +
    "\000\024\006\025\017\006\020\024\024\040\025\013\052" +
    "\016\066\007\067\026\070\037\001\002\000\006\011\275" +
    "\012\203\001\002\000\064\005\uffbd\007\uffbd\011\uffbd\012" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\026\uffbd\041\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\064\uffbd\001\002\000\034\014\277\016\056\017" +
    "\050\020\053\021\061\026\052\053\063\054\065\055\060" +
    "\056\064\057\055\060\054\064\062\001\002\000\066\005" +
    "\uffc0\007\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\300\026\uffc0\041\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\053\uffc0" +
    "\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\064\uffc0\001" +
    "\002\000\024\006\025\017\006\020\024\024\040\025\013" +
    "\052\016\066\007\067\026\070\037\001\002\000\064\005" +
    "\uffbf\007\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\056" +
    "\017\050\020\053\021\061\026\052\041\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\053\063\054\065" +
    "\055\060\056\064\057\055\060\054\064\062\001\002\000" +
    "\014\005\uffa2\007\uffa2\041\uffa2\050\uffa2\051\uffa2\001\002" +
    "\000\052\004\uffff\006\uffff\010\uffff\011\uffff\017\uffff\020" +
    "\uffff\024\uffff\025\uffff\033\uffff\035\uffff\042\uffff\043\uffff" +
    "\044\uffff\052\uffff\061\uffff\062\uffff\063\uffff\066\uffff\067" +
    "\uffff\070\uffff\001\002\000\052\004\043\006\025\010\015" +
    "\011\305\017\006\020\024\024\040\025\013\033\023\035" +
    "\021\042\044\043\014\044\030\052\016\061\010\062\033" +
    "\063\036\066\007\067\026\070\037\001\002\000\064\002" +
    "\ufffa\004\ufffa\006\ufffa\010\ufffa\011\ufffa\017\ufffa\020\ufffa" +
    "\024\ufffa\025\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\042\ufffa\043\ufffa\044\ufffa\052\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\066\ufffa\067\ufffa\070\ufffa\001\002\000" +
    "\064\005\uffc4\007\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\026\uffc4\041\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\064\uffc4\001" +
    "\002\000\006\020\156\066\155\001\002\000\006\005\uffdf" +
    "\012\uffdf\001\002\000\036\016\056\017\050\020\053\021" +
    "\061\026\052\045\325\046\326\053\063\054\065\055\060" +
    "\056\064\057\055\060\054\064\062\001\002\000\024\006" +
    "\025\017\006\020\024\024\040\025\013\052\016\066\007" +
    "\067\026\070\037\001\002\000\036\005\ufff1\007\211\016" +
    "\056\017\050\020\053\021\061\026\052\053\063\054\065" +
    "\055\060\056\064\057\055\060\054\064\062\001\002\000" +
    "\004\005\315\001\002\000\024\006\025\017\006\020\024" +
    "\024\040\025\013\052\016\066\007\067\026\070\037\001" +
    "\002\000\012\005\ufff0\041\122\050\124\051\120\001\002" +
    "\000\004\005\320\001\002\000\024\006\025\017\006\020" +
    "\024\024\040\025\013\052\016\066\007\067\026\070\037" +
    "\001\002\000\034\007\322\016\056\017\050\020\053\021" +
    "\061\026\052\053\063\054\065\055\060\056\064\057\055" +
    "\060\054\064\062\001\002\000\050\004\uffef\006\uffef\010" +
    "\uffef\017\uffef\020\uffef\024\uffef\025\uffef\033\uffef\035\uffef" +
    "\042\uffef\043\uffef\044\uffef\052\uffef\061\uffef\062\uffef\063" +
    "\uffef\066\uffef\067\uffef\070\uffef\001\002\000\050\004\043" +
    "\006\025\010\015\017\006\020\024\024\040\025\013\033" +
    "\023\035\021\042\044\043\014\044\030\052\016\061\010" +
    "\062\033\063\036\066\007\067\026\070\037\001\002\000" +
    "\064\002\uffee\004\uffee\006\uffee\010\uffee\011\uffee\017\uffee" +
    "\020\uffee\024\uffee\025\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\052\uffee" +
    "\061\uffee\062\uffee\063\uffee\066\uffee\067\uffee\070\uffee\001" +
    "\002\000\024\006\025\017\006\020\024\024\040\025\013" +
    "\052\016\066\007\067\026\070\037\001\002\000\024\006" +
    "\025\017\006\020\024\024\040\025\013\052\016\066\007" +
    "\067\026\070\037\001\002\000\036\016\056\017\050\020" +
    "\053\021\061\026\052\044\uffe1\047\330\053\063\054\065" +
    "\055\060\056\064\057\055\060\054\064\062\001\002\000" +
    "\024\006\025\017\006\020\024\024\040\025\013\052\016" +
    "\066\007\067\026\070\037\001\002\000\004\044\030\001" +
    "\002\000\004\010\uffeb\001\002\000\004\010\334\001\002" +
    "\000\050\004\043\006\025\010\015\017\006\020\024\024" +
    "\040\025\013\033\023\035\021\042\044\043\014\044\030" +
    "\052\016\061\010\062\033\063\036\066\007\067\026\070" +
    "\037\001\002\000\004\011\336\001\002\000\064\002\uffea" +
    "\004\uffea\006\uffea\010\uffea\011\uffea\017\uffea\020\uffea\024" +
    "\uffea\025\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\042\uffea\043\uffea\044\uffea\052\uffea\061\uffea\062" +
    "\uffea\063\uffea\066\uffea\067\uffea\070\uffea\001\002\000\034" +
    "\016\056\017\050\020\053\021\061\026\052\044\uffe2\053" +
    "\063\054\065\055\060\056\064\057\055\060\054\064\062" +
    "\001\002\000\036\016\056\017\050\020\053\021\061\026" +
    "\052\044\uffe1\047\330\053\063\054\065\055\060\056\064" +
    "\057\055\060\054\064\062\001\002\000\004\044\030\001" +
    "\002\000\004\010\uffed\001\002\000\004\010\344\001\002" +
    "\000\050\004\043\006\025\010\015\017\006\020\024\024" +
    "\040\025\013\033\023\035\021\042\044\043\014\044\030" +
    "\052\016\061\010\062\033\063\036\066\007\067\026\070" +
    "\037\001\002\000\004\011\346\001\002\000\064\002\uffec" +
    "\004\uffec\006\uffec\010\uffec\011\uffec\017\uffec\020\uffec\024" +
    "\uffec\025\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\042\uffec\043\uffec\044\uffec\052\uffec\061\uffec\062" +
    "\uffec\063\uffec\066\uffec\067\uffec\070\uffec\001\002\000\064" +
    "\005\uffca\007\uffca\011\uffca\012\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\026\uffca\041\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\053\uffca\054" +
    "\uffca\055\uffca\056\uffca\057\uffca\060\uffca\064\uffca\001\002" +
    "\000\024\006\025\017\006\020\024\024\040\025\013\052" +
    "\016\066\007\067\026\070\037\001\002\000\024\006\025" +
    "\017\006\020\024\024\040\025\013\052\016\066\007\067" +
    "\026\070\037\001\002\000\024\006\025\017\006\020\024" +
    "\024\040\025\013\052\016\066\007\067\026\070\037\001" +
    "\002\000\024\006\025\017\006\020\024\024\040\025\013" +
    "\052\016\066\007\067\026\070\037\001\002\000\064\005" +
    "\uffbb\007\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016\056" +
    "\017\050\020\053\021\061\026\052\041\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\053\063\054\065" +
    "\055\060\056\064\057\055\060\054\064\062\001\002\000" +
    "\064\005\uffba\007\uffba\011\uffba\012\uffba\014\uffba\015\uffba" +
    "\016\056\017\050\020\053\021\061\026\052\041\uffba\044" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\053\063" +
    "\054\065\055\060\056\064\057\055\060\054\064\062\001" +
    "\002\000\064\005\uffbc\007\uffbc\011\uffbc\012\uffbc\014\uffbc" +
    "\015\uffbc\016\056\017\050\020\053\021\061\026\052\041" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\053\063\054\065\055\060\056\064\057\055\060\054\064" +
    "\062\001\002\000\064\005\uffb9\007\uffb9\011\uffb9\012\uffb9" +
    "\014\uffb9\015\uffb9\016\056\017\050\020\053\021\061\026" +
    "\052\041\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\053\063\054\065\055\060\056\064\057\055\060" +
    "\054\064\062\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\004\002\003\001\001\000\034\003\044\004" +
    "\021\006\030\007\011\011\016\013\004\022\041\024\040" +
    "\026\026\027\034\030\031\031\010\034\017\001\001\000" +
    "\002\001\001\000\014\004\346\011\016\013\004\024\040" +
    "\026\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\310\011\016\013\004\024\040\026\026\001\001" +
    "\000\004\051\306\001\001\000\004\011\305\001\001\000" +
    "\002\001\001\000\004\036\302\001\001\000\014\004\115" +
    "\011\016\013\004\024\040\026\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\056" +
    "\001\001\000\002\001\001\000\006\011\211\071\212\001" +
    "\001\000\014\004\205\011\016\013\004\024\040\026\206" +
    "\001\001\000\002\001\001\000\004\032\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\046" +
    "\011\016\013\004\024\040\026\026\001\001\000\004\033" +
    "\056\001\001\000\014\004\102\011\016\013\004\024\040" +
    "\026\026\001\001\000\002\001\001\000\014\004\100\011" +
    "\016\013\004\024\040\026\026\001\001\000\014\004\077" +
    "\011\016\013\004\024\040\026\026\001\001\000\014\004" +
    "\076\011\016\013\004\024\040\026\026\001\001\000\014" +
    "\004\075\011\016\013\004\024\040\026\026\001\001\000" +
    "\014\004\074\011\016\013\004\024\040\026\026\001\001" +
    "\000\004\060\072\001\001\000\014\004\071\011\016\013" +
    "\004\024\040\026\026\001\001\000\014\004\070\011\016" +
    "\013\004\024\040\026\026\001\001\000\002\001\001\000" +
    "\014\004\067\011\016\013\004\024\040\026\026\001\001" +
    "\000\014\004\066\011\016\013\004\024\040\026\026\001" +
    "\001\000\014\004\065\011\016\013\004\024\040\026\026" +
    "\001\001\000\004\033\056\001\001\000\004\033\056\001" +
    "\001\000\004\033\056\001\001\000\004\033\056\001\001" +
    "\000\004\033\056\001\001\000\014\004\073\011\016\013" +
    "\004\024\040\026\026\001\001\000\004\033\056\001\001" +
    "\000\004\033\056\001\001\000\004\033\056\001\001\000" +
    "\004\033\056\001\001\000\004\033\056\001\001\000\004" +
    "\033\056\001\001\000\002\001\001\000\004\033\056\001" +
    "\001\000\014\004\104\011\016\013\004\024\040\026\026" +
    "\001\001\000\004\033\056\001\001\000\004\013\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\115\011\016\013\004\024\040\026\116\001\001" +
    "\000\004\033\056\001\001\000\004\032\120\001\001\000" +
    "\004\061\137\001\001\000\004\055\130\001\001\000\002" +
    "\001\001\000\004\042\126\001\001\000\004\062\124\001" +
    "\001\000\014\004\115\011\016\013\004\024\040\026\125" +
    "\001\001\000\004\032\120\001\001\000\034\003\127\004" +
    "\021\006\030\007\011\011\016\013\004\022\041\024\040" +
    "\026\026\027\034\030\031\031\010\034\017\001\001\000" +
    "\002\001\001\000\014\004\131\011\016\013\004\024\040" +
    "\026\026\001\001\000\006\033\056\056\132\001\001\000" +
    "\004\017\134\001\001\000\002\001\001\000\004\057\135" +
    "\001\001\000\014\004\136\011\016\013\004\024\040\026" +
    "\026\001\001\000\004\033\056\001\001\000\014\004\115" +
    "\011\016\013\004\024\040\026\140\001\001\000\004\032" +
    "\120\001\001\000\034\003\142\004\021\006\030\007\011" +
    "\011\016\013\004\022\041\024\040\026\026\027\034\030" +
    "\031\031\010\034\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\115\011\016\013\004\024\040\026" +
    "\145\001\001\000\004\032\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\153\023\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\156\001\001\000\004\023\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\164" +
    "\001\001\000\014\004\163\011\016\013\004\024\040\026" +
    "\026\001\001\000\004\033\056\001\001\000\002\001\001" +
    "\000\004\016\166\001\001\000\004\052\173\001\001\000" +
    "\004\013\170\001\001\000\002\001\001\000\004\016\172" +
    "\001\001\000\002\001\001\000\004\014\174\001\001\000" +
    "\002\001\001\000\004\053\176\001\001\000\002\001\001" +
    "\000\016\004\201\011\016\013\004\015\200\024\040\026" +
    "\026\001\001\000\002\001\001\000\004\033\056\001\001" +
    "\000\014\004\204\011\016\013\004\024\040\026\026\001" +
    "\001\000\002\001\001\000\004\033\056\001\001\000\004" +
    "\033\056\001\001\000\004\032\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\213" +
    "\001\001\000\002\001\001\000\014\004\115\011\016\013" +
    "\004\024\040\026\215\001\001\000\004\032\120\001\001" +
    "\000\004\037\217\001\001\000\034\003\220\004\021\006" +
    "\030\007\011\011\016\013\004\022\041\024\040\026\026" +
    "\027\034\030\031\031\010\034\017\001\001\000\004\040" +
    "\221\001\001\000\004\005\223\001\001\000\034\003\224" +
    "\004\021\006\030\007\011\011\016\013\004\022\041\024" +
    "\040\026\026\027\034\030\031\031\010\034\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\227\011\016\013\004\024\040\026\026\001\001" +
    "\000\004\033\056\001\001\000\004\063\231\001\001\000" +
    "\002\001\001\000\004\020\233\001\001\000\004\021\246" +
    "\001\001\000\014\004\235\011\016\013\004\024\040\026" +
    "\026\001\001\000\006\033\056\064\236\001\001\000\002" +
    "\001\001\000\036\003\241\004\021\006\030\007\011\011" +
    "\016\013\004\022\041\024\040\025\240\026\026\027\034" +
    "\030\031\031\010\034\017\001\001\000\004\035\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\250\001\001\000\014\004\251\011\016\013\004" +
    "\024\040\026\026\001\001\000\006\033\056\066\252\001" +
    "\001\000\002\001\001\000\036\003\241\004\021\006\030" +
    "\007\011\011\016\013\004\022\041\024\040\025\254\026" +
    "\026\027\034\030\031\031\010\034\017\001\001\000\004" +
    "\035\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\260\001\001\000\034\003\261\004\021\006\030" +
    "\007\011\011\016\013\004\022\041\024\040\026\026\027" +
    "\034\030\031\031\010\034\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\275\011" +
    "\016\013\004\024\040\026\026\001\001\000\016\004\266" +
    "\011\016\013\004\024\040\026\026\054\267\001\001\000" +
    "\004\033\056\001\001\000\002\001\001\000\004\013\271" +
    "\001\001\000\002\001\001\000\016\004\201\011\016\013" +
    "\004\015\273\024\040\026\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\056\001\001\000\002\001" +
    "\001\000\014\004\300\011\016\013\004\024\040\026\026" +
    "\001\001\000\004\033\056\001\001\000\004\032\120\001" +
    "\001\000\004\002\303\001\001\000\034\003\044\004\021" +
    "\006\030\007\011\011\016\013\004\022\041\024\040\026" +
    "\026\027\034\030\031\031\010\034\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\307\023\152\001" +
    "\001\000\002\001\001\000\004\033\056\001\001\000\014" +
    "\004\312\011\016\013\004\024\040\026\206\001\001\000" +
    "\006\033\056\044\313\001\001\000\002\001\001\000\014" +
    "\004\115\011\016\013\004\024\040\026\315\001\001\000" +
    "\006\032\120\045\316\001\001\000\002\001\001\000\014" +
    "\004\320\011\016\013\004\024\040\026\026\001\001\000" +
    "\004\033\056\001\001\000\004\046\322\001\001\000\034" +
    "\003\323\004\021\006\030\007\011\011\016\013\004\022" +
    "\041\024\040\026\026\027\034\030\031\031\010\034\017" +
    "\001\001\000\002\001\001\000\014\004\337\011\016\013" +
    "\004\024\040\026\026\001\001\000\014\004\326\011\016" +
    "\013\004\024\040\026\026\001\001\000\006\012\330\033" +
    "\056\001\001\000\014\004\336\011\016\013\004\024\040" +
    "\026\026\001\001\000\004\030\331\001\001\000\004\050" +
    "\332\001\001\000\002\001\001\000\034\003\334\004\021" +
    "\006\030\007\011\011\016\013\004\022\041\024\040\026" +
    "\026\027\034\030\031\031\010\034\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\056\001\001\000" +
    "\006\012\340\033\056\001\001\000\004\030\341\001\001" +
    "\000\004\047\342\001\001\000\002\001\001\000\034\003" +
    "\344\004\021\006\030\007\011\011\016\013\004\022\041" +
    "\024\040\026\026\027\034\030\031\031\010\034\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\056" +
    "\001\001\000\014\004\356\011\016\013\004\024\040\026" +
    "\026\001\001\000\014\004\355\011\016\013\004\024\040" +
    "\026\026\001\001\000\014\004\354\011\016\013\004\024" +
    "\040\026\026\001\001\000\014\004\353\011\016\013\004" +
    "\024\040\026\026\001\001\000\004\033\056\001\001\000" +
    "\004\033\056\001\001\000\004\033\056\001\001\000\004" +
    "\033\056\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



//Para la declaracion de los arrays
  String arDec="";
  int arDecUSe=0;
  String arDecTemp="";

//Para el uso del operador ternario
  String askTemptp="";

//Para la sentencia switch
  String swtVar="";
  DoubleTag swtDTag;
  boolean firstCase=true;
  String swtFTag="";

//Para los punteros
  int pointerLevel=0;
  int pointerUse=0;
  
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // pointer ::= POR NT$27 pointer 
            {
              String RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=pt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pointer",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$27 ::= 
            {
              String RESULT =null;
pointerUse+=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // pointer ::= POR idExp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pointerUse+=1;
                                                  RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pointer",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // dec_pointer ::= POR NT$26 dec_pointer 
            {
              String RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_pointer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$26 ::= 
            {
              String RESULT =null;
pointerLevel+=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // dec_pointer ::= POR IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pointerLevel+=1;
                                                  if(TS.isDeclared(id,false)){
                                                    TS.error(1);
                                                    }else{
                                                      TS.add(id,TS.auxType,false,"0",true,pointerLevel);
                                                      pointerLevel=0;
                                                      RESULT=id;
                                                      }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_pointer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // prSwitch ::= SWITCH 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); firstCase=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prSwitch",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // op_sent ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_sent",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // op_sent ::= sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_sent",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // op_break ::= 
            {
              DoubleTag RESULT =null;
		swtDTag.setV(swtDTag.getF());
                                                  DoubleTag.updateTag(swtDTag,false);
                                                  Generator.GenGoto(swtDTag.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_break",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // op_break ::= BREAK PYC 
            {
              DoubleTag RESULT =null;
		swtDTag.setV(swtDTag.getF());
                                                  DoubleTag.updateTag(swtDTag,false);
                                                  Generator.GenGoto(swtFTag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_break",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // op_default ::= 
            {
              String RESULT =null;
		Generator.GenLabel(swtFTag);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_default",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // op_default ::= DEFAULT DP NT$25 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Generator.GenLabel(swtFTag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_default",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$25 ::= 
            {
              String RESULT =null;
Generator.GenLabel(swtDTag.getV());
                                                  Generator.GenLabel(swtDTag.getF());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // List_switch ::= List_switch CASE NT$23 exp NT$24 DP op_sent op_break 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_switch",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$24 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
swtDTag.setV(swtDTag.getF());
                                                 DoubleTag.updateTag(swtDTag,false);
                                                 Generator.GenCase(swtVar,n,swtDTag);
                                                 Generator.GenLabel(swtDTag.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$23 ::= 
            {
              String RESULT =null;
Generator.GenLabel(swtDTag.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // List_switch ::= CASE exp NT$22 DP op_sent op_break 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_switch",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$22 ::= 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!firstCase){
                                                   Generator.GenLabel(swtDTag.getV());
                                                   swtDTag.setV(swtDTag.getF());
                                                   DoubleTag.updateTag(swtDTag,false);
                                                   Generator.GenCase(swtVar,n,swtDTag);
                                                   Generator.GenLabel(swtDTag.getV());
                                                   }else{
                                                     swtFTag=swtDTag.getV();
                                                     firstCase=false;
                                                     Generator.GenCase(swtVar,n,swtDTag);
                                                   }  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // switchSent ::= prSwitch AP exp CP NT$21 ALL List_switch op_default CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DoubleTag sw = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchSent",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$21 ::= 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag sw = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
swtVar=e1;
                                                  swtDTag=sw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cond ::= AP cond CP 
            {
              DoubleTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cond ::= cond OR NT$20 cond 
            {
              DoubleTag RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (DoubleTag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenLabel(c1.getV());
                                                  Generator.GenGoto(c2.getV());
                                                  RESULT=c2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$20 ::= 
            {
              DoubleTag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c1.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cond ::= cond AND NT$19 cond 
            {
              DoubleTag RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (DoubleTag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenLabel(c1.getF());
                                                  Generator.GenGoto(c2.getF());
                                                  RESULT=c2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$19 ::= 
            {
              DoubleTag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c1.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cond ::= NOT cond 
            {
              DoubleTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String aux = c.getV();
                                                  c.setV(c.getF());
                                                  c.setF(aux);
                                                  RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cond ::= exp NEQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.NEQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cond ::= exp GT exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.GT,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cond ::= exp GEQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.GEQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cond ::= exp EQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.EQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cond ::= exp LEQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.LEQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cond ::= exp LT exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.LT,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // varOrNum ::= NUM 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varOrNum",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // varOrNum ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!TS.isDeclared(id,false)){
                                                    TS.error(2);
                                                  }else{
                                                    RESULT=TS.varBlock(id);
                                                  } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varOrNum",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // idExp ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!TS.isDeclared(id,false)){
                                                   TS.error(2);
                                                 }else{
                                                   RESULT=TS.varBlock(id);
                                                 } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idExp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // prElvis ::= ELVIS 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prElvis",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // prDp ::= DP 
            {
              String RESULT =null;
		RESULT=Generator.newTag(askTemptp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // prAsk ::= ASK 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prAsk",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exp ::= pointer 
            {
              String RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenPointer(pt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp ::= pointer ASIG AMP varOrNum 
            {
              String RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(Generator.seeType(vn)<=2){
                                                    RESULT=Generator.GenAmpPoint(pt,vn,false,pointerUse);
                                                    pointerUse=0;
                                                  }else{
                                                    TS.error(0);
                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp ::= idExp ASIG AMP varOrNum 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(Generator.seeType(vn)<=2){
                                                    RESULT=Generator.GenAmpPoint(id,vn,true,0);
                                                  }else{
                                                    TS.error(0);
                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp ::= pointer ASIG exp 
            {
              String RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenPointAsig(pt,e);
                                                  pointerUse=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp ::= exp prElvis NT$18 exp 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DoubleTag ev = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenAsig(RESULT,e2);
                                                  Generator.GenLabel(ev.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$18 ::= 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag ev = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT=Generator.newTag(Generator.basicType(e1));
                                                  Generator.GenAsig(RESULT,e1);
                                                  PLXC.out.println("   if ("+e1+" != 0) goto "+ev.getV()+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp ::= cond prAsk NT$15 exp NT$16 prDp NT$17 exp 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DoubleTag a = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenAsig(dp,e2);
                                                  Generator.GenLabel(a.getV());
                                                  RESULT=dp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$17 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag a = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenAsig(dp,e1);
                                                  Generator.GenGoto(a.getV());
                                                  Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$16 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DoubleTag a = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
askTemptp=Generator.basicType(e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$15 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag a = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= varOrNum DIVEQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.DIVEQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= varOrNum POREQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.POREQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= varOrNum MENOSEQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.MENOSEQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= varOrNum MASEQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.MASEQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= idExp ASIG NT$14 ALL arExp CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String temp2=Generator.newTag(TS.auxType);
                                                  Generator.GenInitArrayPart2(arDecTemp,temp2,arDec,arDecUSe,true);
                                                  RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$14 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Node nod =TS.getNode(id);
                                                    if(!nod.getIsArray()){
                                                      TS.error(3);
                                                      }else{
                                                        arDec=id;
                                                        arDecUSe=0;
                                                        }
                                                arDecTemp=Generator.newTag(TS.auxType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= idExp AC exp CC ASIG exp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenAsigArray(id,e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= idExp AC exp CC 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String temp = Generator.newTag("");
                                                  Generator.GenUseVarArray(id,e,temp);
                                                  RESULT=temp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= RNUM 
            {
              String RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String rn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=rn; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= NUM 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= idExp MENOSMENOS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),false,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= MENOSMENOS idExp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),true,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= idExp MASMAS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),false,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= MASMAS idExp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),true,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= idExp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= AP exp CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= idExp ASIG exp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenAsig(TS.varBlock(id),e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= MENOS exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(null,Generator.MENOSUNARIO,e,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp MOD exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  RESULT=Generator.GenBinOper(e1,Generator.MOD,e2,temp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp DIV exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.DIV,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp POR exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.POR,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp MENOS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.MENOS,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp MAS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.MAS,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= FLOAT 
            {
              String RESULT =null;
		RESULT="FLOAT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= INT 
            {
              String RESULT =null;
		RESULT="INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arExp ::= exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenInitArray(arDec,arDecTemp,arDecUSe,e);
                                                  arDecUSe++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arExp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arExp ::= arExp COMA exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenInitArray(arDec,arDecTemp,arDecUSe,e);
                                                  arDecUSe++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arExp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arrayInit ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arrayInit ::= ASIG NT$13 ALL arExp CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String temp2=Generator.newTag(TS.auxType);
                                                  Generator.GenInitArrayPart2(arDecTemp,temp2,arDec,arDecUSe,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$13 ::= 
            {
              String RESULT =null;
arDecTemp=Generator.newTag(TS.auxType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // moreDim ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("moreDim",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // moreDim ::= AC varOrNum CC moreDim 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moreDim",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable ::= dec_pointer 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable ::= IDENT AC varOrNum CC moreDim NT$12 arrayInit 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLXC.out.println("   $"+id+"_length = "+vn+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$12 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(Generator.seeType(vn)==1){
                                                     TS.error(0);
                                                   }
                                                   if(TS.isDeclared(id,true)){
                                                   TS.error(1);
                                                   }else{
                                                    TS.add(id,TS.auxType,true,vn,false,0);
                                                    RESULT=id;
                                                    arDec=id;
                                                    arDecUSe=0;
                                                   } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable ::= IDENT ASIG exp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(TS.isDeclared(id,true)){
                                                    TS.error(1);
                                                    }else{
                                                      TS.add(id,TS.auxType,false,"0",false,0);
                                                      RESULT=Generator.GenAsig(TS.varBlock(id),e);
                                                    }  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(TS.isDeclared(id,true)){
                                                   TS.error(1);
                                                   }else{
                                                     TS.add(id,TS.auxType,false,"0",false,0);
                                                     RESULT=id;
                                                   } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // List_var_dec ::= List_var_dec COMA variable 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_var_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // List_var_dec ::= type NT$11 variable 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_var_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$11 ::= 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
TS.auxType=tp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // prStep ::= 
            {
              String RESULT =null;
		RESULT="1"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prStep",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // prStep ::= STEP exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prStep",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // prFor ::= FOR 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // prDo ::= DO 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // prWhile ::= WHILE 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prWhile",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // part_else ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_else",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // part_else ::= ELSE sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_else",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent ::= switchSent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent ::= COMMENT 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent ::= prFor exp DOWNTO exp prStep prDo NT$10 ALL sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Generator.GenGoto(aux.getF());
                                                 Generator.GenLabel(aux2.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV());
                                                Generator.GenCondForDownTo(e1,e2,aux2,true);
                                                Generator.GenLabel(aux.getF());
                                                Generator.GenBinOper(e1,Generator.MENOS,step,e1);
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(aux2.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent ::= prFor exp TO exp prStep prDo NT$9 ALL sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Generator.GenGoto(aux.getF());
                                                Generator.GenLabel(aux2.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV());
                                                Generator.GenCondForDownTo(e1,e2,aux2,false);
                                                Generator.GenLabel(aux.getF());
                                                Generator.GenBinOper(e1,Generator.MAS,step,e1);
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(aux2.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent ::= prFor AP exp NT$6 PYC cond NT$7 PYC exp CP NT$8 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.GenGoto(aux.getF());
                                                Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$6 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sent ::= prDo NT$5 sent WHILE AP cond CP PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Generator.GenLabel(c.getV());
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$5 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent ::= prWhile NT$3 AP cond CP NT$4 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= IF AP cond CP NT$1 sent NT$2 part_else 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
c.setV(c.getF());
                                                c.setF(DoubleTag.newTag());
                                                Generator.GenGoto(c.getF());
                                                Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= ALL NT$0 List_sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TS.oldBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              String RESULT =null;
TS.newBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= PRINT AP exp CP PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Generator.GenPrint(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= List_var_dec PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= exp PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // List_sent ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= List_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // List_sent ::= List_sent sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


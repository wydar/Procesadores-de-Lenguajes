
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 04 19:51:00 CEST 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 04 19:51:00 CEST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\003\004\000\002\003\007" +
    "\000\002\026\002\000\002\003\006\000\002\027\002\000" +
    "\002\030\002\000\002\003\012\000\002\031\002\000\002" +
    "\032\002\000\002\003\011\000\002\033\002\000\002\003" +
    "\012\000\002\034\002\000\002\035\002\000\002\036\002" +
    "\000\002\003\016\000\002\037\002\000\002\003\014\000" +
    "\002\040\002\000\002\003\014\000\002\003\003\000\002" +
    "\005\004\000\002\005\002\000\002\022\003\000\002\023" +
    "\003\000\002\024\003\000\002\012\004\000\002\012\002" +
    "\000\002\041\002\000\002\006\005\000\002\006\005\000" +
    "\002\010\003\000\002\010\005\000\002\042\002\000\002" +
    "\043\002\000\002\010\012\000\002\044\002\000\002\016" +
    "\007\000\002\016\002\000\002\045\002\000\002\014\007" +
    "\000\002\014\002\000\002\015\005\000\002\015\003\000" +
    "\002\007\003\000\002\007\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\010" +
    "\000\002\046\002\000\002\004\010\000\002\004\005\000" +
    "\002\011\003\000\002\013\003\000\002\013\003\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\004" +
    "\000\002\047\002\000\002\021\006\000\002\050\002\000" +
    "\002\021\006\000\002\021\005\000\002\051\002\000\002" +
    "\017\010\000\002\020\006\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\044\002\uffff\004\uffff\006\uffff\010\uffff\016" +
    "\uffff\023\uffff\024\uffff\032\uffff\037\uffff\040\uffff\041\uffff" +
    "\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\001" +
    "\002\000\044\002\030\004\035\006\022\010\015\016\006" +
    "\023\034\024\013\032\021\037\036\040\012\041\024\056" +
    "\010\057\027\060\032\061\007\062\023\063\033\001\002" +
    "\000\012\026\271\027\273\030\272\031\270\001\002\000" +
    "\020\006\022\016\006\023\034\024\013\061\007\062\023" +
    "\063\033\001\002\000\076\005\uffb7\007\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055" +
    "\uffb7\001\002\000\004\061\uffd1\001\002\000\020\006\232" +
    "\016\006\023\034\024\013\061\007\062\023\063\033\001" +
    "\002\000\004\006\uffe6\001\002\000\004\061\057\001\002" +
    "\000\004\061\uffe1\001\002\000\044\004\ufffb\006\ufffb\010" +
    "\ufffb\011\ufffb\016\ufffb\023\ufffb\024\ufffb\032\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\001\002\000\066\005\uffc7\007\uffc7\011\uffc7" +
    "\012\uffc7\013\202\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\203\023\201\024\200\025\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\001\002\000\060\005\uffc0" +
    "\007\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\176\025\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\001\002\000\016\005\175\015\043" +
    "\016\044\017\046\020\045\025\042\001\002\000\004\006" +
    "\164\001\002\000\020\006\022\016\006\023\034\024\013" +
    "\061\007\062\023\063\033\001\002\000\066\005\uffc2\007" +
    "\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\025\uffc2\026\uffb5\027\uffb5\030\uffb5\031\uffb5\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\001\002\000" +
    "\042\004\uffe5\006\uffe5\010\uffe5\016\uffe5\023\uffe5\024\uffe5" +
    "\032\uffe5\037\uffe5\040\uffe5\041\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\001\002\000\006\005\130" +
    "\012\127\001\002\000\042\004\ufff3\006\ufff3\010\ufff3\016" +
    "\ufff3\023\ufff3\024\ufff3\032\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\001" +
    "\002\000\004\061\uffd0\001\002\000\004\002\000\001\002" +
    "\000\004\006\ufff6\001\002\000\050\002\uffe9\004\uffe9\006" +
    "\uffe9\010\uffe9\011\uffe9\016\uffe9\023\uffe9\024\uffe9\032\uffe9" +
    "\033\uffe9\037\uffe9\040\uffe9\041\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\001\002\000\056\005\uffc1" +
    "\007\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\025\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\001\002\000\004\061\057\001\002\000\004" +
    "\006\040\001\002\000\020\006\uffe4\016\uffe4\023\uffe4\024" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\001\002\000\046\002\001" +
    "\004\001\006\001\010\001\011\001\016\001\023\001\024" +
    "\001\032\001\037\001\040\001\041\001\056\001\057\001" +
    "\060\001\061\001\062\001\063\001\001\002\000\020\006" +
    "\022\016\006\023\034\024\013\061\007\062\023\063\033" +
    "\001\002\000\016\007\047\015\043\016\044\017\046\020" +
    "\045\025\042\001\002\000\020\006\022\016\006\023\034" +
    "\024\013\061\007\062\023\063\033\001\002\000\020\006" +
    "\022\016\006\023\034\024\013\061\007\062\023\063\033" +
    "\001\002\000\020\006\022\016\006\023\034\024\013\061" +
    "\007\062\023\063\033\001\002\000\020\006\022\016\006" +
    "\023\034\024\013\061\007\062\023\063\033\001\002\000" +
    "\020\006\022\016\006\023\034\024\013\061\007\062\023" +
    "\063\033\001\002\000\004\005\050\001\002\000\050\002" +
    "\ufffc\004\ufffc\006\ufffc\010\ufffc\011\ufffc\016\ufffc\023\ufffc" +
    "\024\ufffc\032\ufffc\033\ufffc\037\ufffc\040\ufffc\041\ufffc\056" +
    "\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\001\002" +
    "\000\056\005\uffcd\007\uffcd\011\uffcd\012\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\025\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\001\002\000\056\005\uffcc" +
    "\007\uffcc\011\uffcc\012\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\025\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\001\002\000\056\005\uffce\007\uffce\011\uffce" +
    "\012\uffce\014\uffce\015\uffce\016\uffce\017\046\020\045\025" +
    "\042\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\001" +
    "\002\000\056\005\uffcf\007\uffcf\011\uffcf\012\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\046\020\045\025\042\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\001\002\000\056\005" +
    "\uffcb\007\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\025\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\055\uffcb\001\002\000\056\005\uffc6\007\uffc6\011" +
    "\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\025\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\001\002\000\056\005\uffb7\007\uffb7\011\uffb7\012\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\025\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\001\002\000\004" +
    "\006\061\001\002\000\022\006\065\016\006\023\034\024" +
    "\013\047\064\061\007\062\023\063\033\001\002\000\030" +
    "\015\043\016\044\017\046\020\045\025\042\050\104\051" +
    "\105\052\102\053\103\054\101\055\100\001\002\000\010" +
    "\007\115\045\072\046\070\001\002\000\022\006\065\016" +
    "\006\023\034\024\013\047\064\061\007\062\023\063\033" +
    "\001\002\000\022\006\065\016\006\023\034\024\013\047" +
    "\064\061\007\062\023\063\033\001\002\000\032\007\077" +
    "\015\043\016\044\017\046\020\045\025\042\050\104\051" +
    "\105\052\102\053\103\054\101\055\100\001\002\000\010" +
    "\007\071\045\072\046\070\001\002\000\022\006\uffad\016" +
    "\uffad\023\uffad\024\uffad\047\uffad\061\uffad\062\uffad\063\uffad" +
    "\001\002\000\012\005\uffa9\007\uffa9\045\uffa9\046\uffa9\001" +
    "\002\000\022\006\uffab\016\uffab\023\uffab\024\uffab\047\uffab" +
    "\061\uffab\062\uffab\063\uffab\001\002\000\022\006\065\016" +
    "\006\023\034\024\013\047\064\061\007\062\023\063\033" +
    "\001\002\000\012\005\uffaa\007\uffaa\045\uffaa\046\uffaa\001" +
    "\002\000\022\006\065\016\006\023\034\024\013\047\064" +
    "\061\007\062\023\063\033\001\002\000\012\005\uffac\007" +
    "\uffac\045\uffac\046\uffac\001\002\000\056\005\uffc8\007\uffc8" +
    "\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\025\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\001\002\000\020\006\022\016\006\023\034\024\013" +
    "\061\007\062\023\063\033\001\002\000\020\006\022\016" +
    "\006\023\034\024\013\061\007\062\023\063\033\001\002" +
    "\000\020\006\022\016\006\023\034\024\013\061\007\062" +
    "\023\063\033\001\002\000\020\006\022\016\006\023\034" +
    "\024\013\061\007\062\023\063\033\001\002\000\020\006" +
    "\022\016\006\023\034\024\013\061\007\062\023\063\033" +
    "\001\002\000\020\006\022\016\006\023\034\024\013\061" +
    "\007\062\023\063\033\001\002\000\024\005\uffb3\007\uffb3" +
    "\015\043\016\044\017\046\020\045\025\042\045\uffb3\046" +
    "\uffb3\001\002\000\024\005\uffb4\007\uffb4\015\043\016\044" +
    "\017\046\020\045\025\042\045\uffb4\046\uffb4\001\002\000" +
    "\024\005\uffb1\007\uffb1\015\043\016\044\017\046\020\045" +
    "\025\042\045\uffb1\046\uffb1\001\002\000\024\005\uffb0\007" +
    "\uffb0\015\043\016\044\017\046\020\045\025\042\045\uffb0" +
    "\046\uffb0\001\002\000\024\005\uffb2\007\uffb2\015\043\016" +
    "\044\017\046\020\045\025\042\045\uffb2\046\uffb2\001\002" +
    "\000\024\005\uffaf\007\uffaf\015\043\016\044\017\046\020" +
    "\045\025\042\045\uffaf\046\uffaf\001\002\000\012\005\uffae" +
    "\007\uffae\045\072\046\070\001\002\000\042\004\ufff5\006" +
    "\ufff5\010\ufff5\016\ufff5\023\ufff5\024\ufff5\032\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\001\002\000\042\004\035\006\022\010\015" +
    "\016\006\023\034\024\013\032\021\037\036\040\012\041" +
    "\024\056\010\057\027\060\032\061\007\062\023\063\033" +
    "\001\002\000\050\002\ufff4\004\ufff4\006\ufff4\010\ufff4\011" +
    "\ufff4\016\ufff4\023\ufff4\024\ufff4\032\ufff4\033\ufff4\037\ufff4" +
    "\040\ufff4\041\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062" +
    "\ufff4\063\ufff4\001\002\000\042\004\035\006\022\010\015" +
    "\016\006\023\034\024\013\032\021\037\036\040\012\041" +
    "\024\056\010\057\027\060\032\061\007\062\023\063\033" +
    "\001\002\000\004\040\122\001\002\000\004\006\123\001" +
    "\002\000\022\006\065\016\006\023\034\024\013\047\064" +
    "\061\007\062\023\063\033\001\002\000\010\007\125\045" +
    "\072\046\070\001\002\000\004\005\126\001\002\000\050" +
    "\002\ufff2\004\ufff2\006\ufff2\010\ufff2\011\ufff2\016\ufff2\023" +
    "\ufff2\024\ufff2\032\ufff2\033\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\001" +
    "\002\000\004\061\132\001\002\000\050\002\ufffd\004\ufffd" +
    "\006\ufffd\010\ufffd\011\ufffd\016\ufffd\023\ufffd\024\ufffd\032" +
    "\ufffd\033\ufffd\037\ufffd\040\ufffd\041\ufffd\056\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\063\ufffd\001\002\000\006\005" +
    "\uffdf\012\uffdf\001\002\000\012\005\uffde\012\uffde\013\133" +
    "\021\134\001\002\000\006\061\137\062\136\001\002\000" +
    "\020\006\022\016\006\023\034\024\013\061\007\062\023" +
    "\063\033\001\002\000\020\005\uffdd\012\uffdd\015\043\016" +
    "\044\017\046\020\045\025\042\001\002\000\004\014\uffb5" +
    "\001\002\000\004\014\uffb6\001\002\000\004\014\141\001" +
    "\002\000\012\005\uffdc\012\uffdc\013\uffdc\021\uffdc\001\002" +
    "\000\012\005\uffd7\012\uffd7\013\144\021\uffd7\001\002\000" +
    "\010\005\uffdb\012\uffdb\021\uffdb\001\002\000\006\061\137" +
    "\062\136\001\002\000\004\014\146\001\002\000\012\005" +
    "\uffd9\012\uffd9\013\uffd9\021\uffd9\001\002\000\012\005\uffd7" +
    "\012\uffd7\013\144\021\uffd7\001\002\000\010\005\uffd8\012" +
    "\uffd8\021\uffd8\001\002\000\010\005\uffd4\012\uffd4\021\153" +
    "\001\002\000\006\005\uffda\012\uffda\001\002\000\004\010" +
    "\uffd6\001\002\000\004\010\155\001\002\000\020\006\022" +
    "\016\006\023\034\024\013\061\007\062\023\063\033\001" +
    "\002\000\006\011\161\012\160\001\002\000\020\011\uffd2" +
    "\012\uffd2\015\043\016\044\017\046\020\045\025\042\001" +
    "\002\000\020\006\022\016\006\023\034\024\013\061\007" +
    "\062\023\063\033\001\002\000\006\005\uffd5\012\uffd5\001" +
    "\002\000\020\011\uffd3\012\uffd3\015\043\016\044\017\046" +
    "\020\045\025\042\001\002\000\016\007\077\015\043\016" +
    "\044\017\046\020\045\025\042\001\002\000\022\006\065" +
    "\016\006\023\034\024\013\047\064\061\007\062\023\063" +
    "\033\001\002\000\010\007\166\045\072\046\070\001\002" +
    "\000\042\004\ufff9\006\ufff9\010\ufff9\016\ufff9\023\ufff9\024" +
    "\ufff9\032\ufff9\037\ufff9\040\ufff9\041\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\063\ufff9\001\002\000\042\004" +
    "\035\006\022\010\015\016\006\023\034\024\013\032\021" +
    "\037\036\040\012\041\024\056\010\057\027\060\032\061" +
    "\007\062\023\063\033\001\002\000\050\002\ufff8\004\ufff8" +
    "\006\ufff8\010\ufff8\011\ufff8\016\ufff8\023\ufff8\024\ufff8\032" +
    "\ufff8\033\ufff8\037\ufff8\040\ufff8\041\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\063\ufff8\001\002\000\050\002" +
    "\uffe7\004\uffe7\006\uffe7\010\uffe7\011\uffe7\016\uffe7\023\uffe7" +
    "\024\uffe7\032\uffe7\033\172\037\uffe7\040\uffe7\041\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002" +
    "\000\042\004\035\006\022\010\015\016\006\023\034\024" +
    "\013\032\021\037\036\040\012\041\024\056\010\057\027" +
    "\060\032\061\007\062\023\063\033\001\002\000\050\002" +
    "\ufff7\004\ufff7\006\ufff7\010\ufff7\011\ufff7\016\ufff7\023\ufff7" +
    "\024\ufff7\032\ufff7\033\ufff7\037\ufff7\040\ufff7\041\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\001\002" +
    "\000\050\002\uffe8\004\uffe8\006\uffe8\010\uffe8\011\uffe8\016" +
    "\uffe8\023\uffe8\024\uffe8\032\uffe8\033\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063" +
    "\uffe8\001\002\000\050\002\ufffe\004\ufffe\006\ufffe\010\ufffe" +
    "\011\ufffe\016\ufffe\023\ufffe\024\ufffe\032\ufffe\033\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\063\ufffe\001\002\000\020\006\022\016\006\023" +
    "\034\024\013\061\007\062\023\063\033\001\002\000\056" +
    "\005\uffb8\007\uffb8\011\uffb8\012\uffb8\014\uffb8\015\043\016" +
    "\044\017\046\020\045\025\042\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\001\002\000\056\005\uffc3\007\uffc3" +
    "\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\025\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\001\002\000\056\005\uffc5\007\uffc5\011\uffc5\012\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\025\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\001\002\000" +
    "\020\006\022\016\006\023\034\024\013\061\007\062\023" +
    "\063\033\001\002\000\022\006\022\010\uffba\016\006\023" +
    "\034\024\013\061\007\062\023\063\033\001\002\000\056" +
    "\005\uffc9\007\uffc9\011\uffc9\012\uffc9\014\uffc9\015\043\016" +
    "\044\017\046\020\045\025\042\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\001\002\000\004\010\206\001\002" +
    "\000\020\006\022\016\006\023\034\024\013\061\007\062" +
    "\023\063\033\001\002\000\006\011\210\012\160\001\002" +
    "\000\056\005\uffb9\007\uffb9\011\uffb9\012\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\025\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\001\002\000\016\014\212" +
    "\015\043\016\044\017\046\020\045\025\042\001\002\000" +
    "\062\005\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\214\025\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\001\002\000" +
    "\062\005\uffa5\007\uffa5\011\uffa5\012\uffa5\013\217\014\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\025\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\001\002\000" +
    "\020\006\022\016\006\023\034\024\013\061\007\062\023" +
    "\063\033\001\002\000\056\005\uffbb\007\uffbb\011\uffbb\012" +
    "\uffbb\014\uffbb\015\043\016\044\017\046\020\045\025\042" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\001\002" +
    "\000\060\005\uffa7\007\uffa7\011\uffa7\012\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\025\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\001\002\000\020" +
    "\006\022\016\006\023\034\024\013\061\007\062\023\063" +
    "\033\001\002\000\016\014\221\015\043\016\044\017\046" +
    "\020\045\025\042\001\002\000\062\005\uffa5\007\uffa5\011" +
    "\uffa5\012\uffa5\013\217\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\025\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\001\002\000\060\005\uffa6\007\uffa6\011" +
    "\uffa6\012\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\025\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\055\uffa6\001\002\000\044\004\uffff\006\uffff\010\uffff\011" +
    "\uffff\016\uffff\023\uffff\024\uffff\032\uffff\037\uffff\040\uffff" +
    "\041\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063" +
    "\uffff\001\002\000\044\004\035\006\022\010\015\011\225" +
    "\016\006\023\034\024\013\032\021\037\036\040\012\041" +
    "\024\056\010\057\027\060\032\061\007\062\023\063\033" +
    "\001\002\000\050\002\ufffa\004\ufffa\006\ufffa\010\ufffa\011" +
    "\ufffa\016\ufffa\023\ufffa\024\ufffa\032\ufffa\033\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062" +
    "\ufffa\063\ufffa\001\002\000\004\061\132\001\002\000\006" +
    "\005\uffe0\012\uffe0\001\002\000\056\005\uffc4\007\uffc4\011" +
    "\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\025\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\001\002\000\020\015\043\016\044\017\046\020\045\025" +
    "\042\042\245\043\246\001\002\000\020\006\022\016\006" +
    "\023\034\024\013\061\007\062\023\063\033\001\002\000" +
    "\020\005\ufff1\007\077\015\043\016\044\017\046\020\045" +
    "\025\042\001\002\000\004\005\235\001\002\000\022\006" +
    "\065\016\006\023\034\024\013\047\064\061\007\062\023" +
    "\063\033\001\002\000\010\005\ufff0\045\072\046\070\001" +
    "\002\000\004\005\240\001\002\000\020\006\022\016\006" +
    "\023\034\024\013\061\007\062\023\063\033\001\002\000" +
    "\016\007\242\015\043\016\044\017\046\020\045\025\042" +
    "\001\002\000\042\004\uffef\006\uffef\010\uffef\016\uffef\023" +
    "\uffef\024\uffef\032\uffef\037\uffef\040\uffef\041\uffef\056\uffef" +
    "\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\001\002\000" +
    "\042\004\035\006\022\010\015\016\006\023\034\024\013" +
    "\032\021\037\036\040\012\041\024\056\010\057\027\060" +
    "\032\061\007\062\023\063\033\001\002\000\050\002\uffee" +
    "\004\uffee\006\uffee\010\uffee\011\uffee\016\uffee\023\uffee\024" +
    "\uffee\032\uffee\033\uffee\037\uffee\040\uffee\041\uffee\056\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\001\002\000" +
    "\020\006\022\016\006\023\034\024\013\061\007\062\023" +
    "\063\033\001\002\000\020\006\022\016\006\023\034\024" +
    "\013\061\007\062\023\063\033\001\002\000\020\015\043" +
    "\016\044\017\046\020\045\025\042\041\uffe2\044\250\001" +
    "\002\000\020\006\022\016\006\023\034\024\013\061\007" +
    "\062\023\063\033\001\002\000\004\041\024\001\002\000" +
    "\004\010\uffeb\001\002\000\004\010\254\001\002\000\042" +
    "\004\035\006\022\010\015\016\006\023\034\024\013\032" +
    "\021\037\036\040\012\041\024\056\010\057\027\060\032" +
    "\061\007\062\023\063\033\001\002\000\004\011\256\001" +
    "\002\000\050\002\uffea\004\uffea\006\uffea\010\uffea\011\uffea" +
    "\016\uffea\023\uffea\024\uffea\032\uffea\033\uffea\037\uffea\040" +
    "\uffea\041\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea" +
    "\063\uffea\001\002\000\016\015\043\016\044\017\046\020" +
    "\045\025\042\041\uffe3\001\002\000\020\015\043\016\044" +
    "\017\046\020\045\025\042\041\uffe2\044\250\001\002\000" +
    "\004\041\024\001\002\000\004\010\uffed\001\002\000\004" +
    "\010\264\001\002\000\042\004\035\006\022\010\015\016" +
    "\006\023\034\024\013\032\021\037\036\040\012\041\024" +
    "\056\010\057\027\060\032\061\007\062\023\063\033\001" +
    "\002\000\004\011\266\001\002\000\050\002\uffec\004\uffec" +
    "\006\uffec\010\uffec\011\uffec\016\uffec\023\uffec\024\uffec\032" +
    "\uffec\033\uffec\037\uffec\040\uffec\041\uffec\056\uffec\057\uffec" +
    "\060\uffec\061\uffec\062\uffec\063\uffec\001\002\000\056\005" +
    "\uffca\007\uffca\011\uffca\012\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\025\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\001\002\000\020\006\022\016\006\023" +
    "\034\024\013\061\007\062\023\063\033\001\002\000\020" +
    "\006\022\016\006\023\034\024\013\061\007\062\023\063" +
    "\033\001\002\000\020\006\022\016\006\023\034\024\013" +
    "\061\007\062\023\063\033\001\002\000\020\006\022\016" +
    "\006\023\034\024\013\061\007\062\023\063\033\001\002" +
    "\000\056\005\uffbe\007\uffbe\011\uffbe\012\uffbe\014\uffbe\015" +
    "\043\016\044\017\046\020\045\025\042\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\001\002\000\056\005\uffbd" +
    "\007\uffbd\011\uffbd\012\uffbd\014\uffbd\015\043\016\044\017" +
    "\046\020\045\025\042\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054" +
    "\uffbd\055\uffbd\001\002\000\056\005\uffbf\007\uffbf\011\uffbf" +
    "\012\uffbf\014\uffbf\015\043\016\044\017\046\020\045\025" +
    "\042\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\001" +
    "\002\000\056\005\uffbc\007\uffbc\011\uffbc\012\uffbc\014\uffbc" +
    "\015\043\016\044\017\046\020\045\025\042\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\002\003\001\001\000\026\003\036\004" +
    "\017\006\024\007\013\011\015\013\004\017\016\022\030" +
    "\023\025\024\010\001\001\000\002\001\001\000\012\004" +
    "\266\011\015\013\004\017\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\230\011\015\013\004\017" +
    "\016\001\001\000\002\001\001\000\004\011\227\001\001" +
    "\000\004\041\225\001\001\000\004\026\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\162\011\015\013\004\017\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\040\011\015" +
    "\013\004\017\016\001\001\000\002\001\001\000\012\004" +
    "\054\011\015\013\004\017\016\001\001\000\012\004\053" +
    "\011\015\013\004\017\016\001\001\000\012\004\052\011" +
    "\015\013\004\017\016\001\001\000\012\004\051\011\015" +
    "\013\004\017\016\001\001\000\012\004\050\011\015\013" +
    "\004\017\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\061\011\015\013" +
    "\004\017\016\021\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\061\011\015\013\004\017\016\021" +
    "\113\001\001\000\014\004\065\011\015\013\004\017\016" +
    "\021\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\074\001\001\000\002\001\001\000\004\050\072" +
    "\001\001\000\014\004\061\011\015\013\004\017\016\021" +
    "\073\001\001\000\002\001\001\000\014\004\061\011\015" +
    "\013\004\017\016\021\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\112\011\015\013\004\017\016" +
    "\001\001\000\012\004\111\011\015\013\004\017\016\001" +
    "\001\000\012\004\110\011\015\013\004\017\016\001\001" +
    "\000\012\004\107\011\015\013\004\017\016\001\001\000" +
    "\012\004\106\011\015\013\004\017\016\001\001\000\012" +
    "\004\105\011\015\013\004\017\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\115\001\001\000\026\003\116\004\017\006\024" +
    "\007\013\011\015\013\004\017\016\022\030\023\025\024" +
    "\010\001\001\000\002\001\001\000\026\003\120\004\017" +
    "\006\024\007\013\011\015\013\004\017\016\022\030\023" +
    "\025\024\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\061\011\015\013\004\017\016\021\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\137\001\001\000\012" +
    "\004\134\011\015\013\004\017\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\141\001\001\000\004\016\142\001\001\000" +
    "\004\043\150\001\001\000\004\013\144\001\001\000\002" +
    "\001\001\000\004\044\146\001\001\000\004\016\147\001" +
    "\001\000\002\001\001\000\004\014\151\001\001\000\002" +
    "\001\001\000\004\045\153\001\001\000\002\001\001\000" +
    "\014\004\156\011\015\013\004\015\155\017\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\161\011" +
    "\015\013\004\017\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\061\011\015\013" +
    "\004\017\016\021\164\001\001\000\002\001\001\000\004" +
    "\027\166\001\001\000\026\003\167\004\017\006\024\007" +
    "\013\011\015\013\004\017\016\022\030\023\025\024\010" +
    "\001\001\000\004\030\170\001\001\000\004\005\172\001" +
    "\001\000\026\003\173\004\017\006\024\007\013\011\015" +
    "\013\004\017\016\022\030\023\025\024\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\176\011\015\013\004\017\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\210" +
    "\011\015\013\004\017\016\001\001\000\014\004\203\011" +
    "\015\013\004\017\016\046\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\156\011\015\013\004\015" +
    "\206\017\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\212\001\001\000\004\020" +
    "\215\001\001\000\012\004\214\011\015\013\004\017\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\217\011\015\013\004\017\016\001\001\000\002\001\001" +
    "\000\004\020\221\001\001\000\002\001\001\000\004\002" +
    "\223\001\001\000\026\003\036\004\017\006\024\007\013" +
    "\011\015\013\004\017\016\022\030\023\025\024\010\001" +
    "\001\000\002\001\001\000\004\010\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\232\011\015\013\004\017\016\001\001\000\004\034\233" +
    "\001\001\000\002\001\001\000\014\004\061\011\015\013" +
    "\004\017\016\021\235\001\001\000\004\035\236\001\001" +
    "\000\002\001\001\000\012\004\240\011\015\013\004\017" +
    "\016\001\001\000\002\001\001\000\004\036\242\001\001" +
    "\000\026\003\243\004\017\006\024\007\013\011\015\013" +
    "\004\017\016\022\030\023\025\024\010\001\001\000\002" +
    "\001\001\000\012\004\257\011\015\013\004\017\016\001" +
    "\001\000\012\004\246\011\015\013\004\017\016\001\001" +
    "\000\004\012\250\001\001\000\012\004\256\011\015\013" +
    "\004\017\016\001\001\000\004\023\251\001\001\000\004" +
    "\040\252\001\001\000\002\001\001\000\026\003\254\004" +
    "\017\006\024\007\013\011\015\013\004\017\016\022\030" +
    "\023\025\024\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\260\001\001\000\004" +
    "\023\261\001\001\000\004\037\262\001\001\000\002\001" +
    "\001\000\026\003\264\004\017\006\024\007\013\011\015" +
    "\013\004\017\016\022\030\023\025\024\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\276\011\015\013\004\017\016\001\001\000\012\004" +
    "\275\011\015\013\004\017\016\001\001\000\012\004\274" +
    "\011\015\013\004\017\016\001\001\000\012\004\273\011" +
    "\015\013\004\017\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



  String arDec="";
  int arDecUSe=0;
  String arDecTam="";
  String arDecTemp="";
  ArrayList<String> arAsig = new ArrayList<String>();

  int arDim=0;
  String [] arTam = new String [10];
  String mulArId="";

  
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // moreDim ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("moreDim",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // moreDim ::= AC exp CC moreDim 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		arTam[arDim]=e;
                                                arDim++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moreDim",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // array ::= idExp AC exp CC NT$19 moreDim 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String temp = Generator.newTag("");
                                                    if(arDim>1){
                                                      RESULT=Generator.GenUseVarMultiArray(id,arTam,arDim,temp,false);
                                                      mulArId=id;
                                                    }else{
                                                      Generator.GenUseVarArray(id,e,temp);
                                                      RESULT=temp;
                                                    }
                                                    arDim=0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$19 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
arTam[arDim]=e;
                                                    arDim++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cond ::= AP cond CP 
            {
              DoubleTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond ::= cond OR NT$18 cond 
            {
              DoubleTag RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (DoubleTag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenLabel(c1.getV());
                                                  Generator.GenGoto(c2.getV());
                                                  RESULT=c2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$18 ::= 
            {
              DoubleTag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c1.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cond ::= cond AND NT$17 cond 
            {
              DoubleTag RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (DoubleTag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenLabel(c1.getF());
                                                  Generator.GenGoto(c2.getF());
                                                  RESULT=c2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$17 ::= 
            {
              DoubleTag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c1.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cond ::= NOT cond 
            {
              DoubleTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String aux = c.getV();
                                                  c.setV(c.getF());
                                                  c.setF(aux);
                                                  RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cond ::= exp NEQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.NEQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond ::= exp GT exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.GT,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond ::= exp GEQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.GEQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond ::= exp EQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.EQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond ::= exp LEQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.LEQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cond ::= exp LT exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.LT,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // varOrNum ::= NUM 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varOrNum",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // varOrNum ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!TS.isDeclared(id,false)){
                                                    TS.error(2);
                                                    }else{
                                                      RESULT=TS.varBlock(id);
                                                  } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varOrNum",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // idExp ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!TS.isDeclared(id,false)){
                                                    TS.error(2);
                                                    }else{
                                                      RESULT=TS.varBlock(id);
                                                  } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idExp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp ::= array ASIG exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenAsigMultiArray(mulArId,temp,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= idExp ASIG NT$16 ALL arExp CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String temp2=Generator.newTag(TS.auxType);
                                                  Generator.GenInitArrayPart2(arDecTemp,temp2,arDec,arDecUSe,true);
                                                  RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$16 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Node nod =TS.getNode(id);
                                                  if(!nod.getIsArray()){
                                                    TS.error(3);
                                                    }else{
                                                      arDec=id;
                                                      arDecUSe=0;
                                                      }
                                                  arDecTemp=Generator.newTag(TS.auxType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= idExp AC exp CC ASIG exp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenAsigArray(id,e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= varOrNum DIVEQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.DIVEQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= varOrNum POREQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.POREQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= varOrNum MENOSEQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.MENOSEQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= varOrNum MASEQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.MASEQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= array 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= RNUM 
            {
              String RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String rn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=rn; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= NUM 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= idExp MENOSMENOS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),false,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= MENOSMENOS idExp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),true,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= idExp MASMAS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),false,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= MASMAS idExp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),true,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= idExp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= AP exp CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= idExp ASIG exp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenAsig(TS.varBlock(id),e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= MENOS exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(null,Generator.MENOSUNARIO,e,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp MOD exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  RESULT=Generator.GenBinOper(e1,Generator.MOD,e2,temp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp DIV exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.DIV,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp POR exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.POR,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp MENOS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.MENOS,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp MAS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.MAS,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= FLOAT 
            {
              String RESULT =null;
		RESULT="FLOAT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= INT 
            {
              String RESULT =null;
		RESULT="INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arExp ::= exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenInitArray(arDec,arDecTemp,arDecUSe,e);
                                                  arDecUSe++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arExp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arExp ::= arExp COMA exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenInitArray(arDec,arDecTemp,arDecUSe,e);
                                                  arDecUSe++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arExp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arrayInit ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arrayInit ::= ASIG NT$15 ALL arExp CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String temp2=Generator.newTag(TS.auxType);
                                                  Generator.GenInitArrayPart2(arDecTemp,temp2,arDec,arDecUSe,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$15 ::= 
            {
              String RESULT =null;
arDecTemp=Generator.newTag(TS.auxType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // moreDim_dec ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("moreDim_dec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // moreDim_dec ::= AC varOrNum CC NT$14 moreDim_dec 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("moreDim_dec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$14 ::= 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if(Generator.seeType(vn)==1){
                                                  TS.error(0);
                                                  }else{
                                                    arTam[arDim]=vn;
                                                    arDim++;
                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable ::= IDENT AC varOrNum CC NT$12 moreDim_dec NT$13 arrayInit 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		PLXC.out.println("   $"+id+"_length = "+TS.getNode(id).getTam()+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$13 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
if(TS.isDeclared(id,true)){
                                                   TS.error(1);
                                                   }else{
                                                     if(arDim==1){
                                                       TS.addArray(id,TS.auxType,arTam[0]);
                                                     }else{
                                                       TS.addMultiArray(id,TS.auxType,arTam,arDim);
                                                     }
                                                    RESULT=id;
                                                    arDec=id;
                                                    arDecUSe=0;
                                                    arDim=0;
                                                   } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$12 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if(Generator.seeType(vn)==1){
                                                   TS.error(0);
                                                   }else{
                                                     arTam[arDim]=vn;
                                                     arDim++;
                                                     }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable ::= IDENT ASIG exp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(TS.isDeclared(id,true)){
                                                    TS.error(1);
                                                    }else{
                                                      TS.add(id,TS.auxType);
                                                      RESULT=Generator.GenAsig(TS.varBlock(id),e);
                                                    }  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variable ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(TS.isDeclared(id,true)){
                                                   TS.error(1);
                                                   }else{
                                                     TS.add(id,TS.auxType);
                                                     RESULT=id;
                                                   } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // List_var_dec ::= List_var_dec COMA variable 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_var_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // List_var_dec ::= type NT$11 variable 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_var_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$11 ::= 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
TS.auxType=tp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // prStep ::= 
            {
              String RESULT =null;
		RESULT="1"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prStep",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // prStep ::= STEP exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prStep",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // prFor ::= FOR 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // prDo ::= DO 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // prWhile ::= WHILE 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prWhile",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // part_else ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_else",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // part_else ::= ELSE sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_else",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent ::= COMMENT 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent ::= prFor exp DOWNTO exp prStep prDo NT$10 ALL sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Generator.GenGoto(aux.getF());
                                                 Generator.GenLabel(aux2.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV());
                                                Generator.GenCondForDownTo(e1,e2,aux2,true);
                                                Generator.GenLabel(aux.getF());
                                                Generator.GenBinOper(e1,Generator.MENOS,step,e1);
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(aux2.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent ::= prFor exp TO exp prStep prDo NT$9 ALL sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Generator.GenGoto(aux.getF());
                                                Generator.GenLabel(aux2.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV());
                                                Generator.GenCondForDownTo(e1,e2,aux2,false);
                                                Generator.GenLabel(aux.getF());
                                                Generator.GenBinOper(e1,Generator.MAS,step,e1);
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(aux2.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent ::= prFor AP exp NT$6 PYC cond NT$7 PYC exp CP NT$8 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.GenGoto(aux.getF());
                                                Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$6 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sent ::= prDo NT$5 sent WHILE AP cond CP PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Generator.GenLabel(c.getV());
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$5 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent ::= prWhile NT$3 AP cond CP NT$4 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= IF AP cond CP NT$1 sent NT$2 part_else 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
c.setV(c.getF());
                                                c.setF(DoubleTag.newTag());
                                                Generator.GenGoto(c.getF());
                                                Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= ALL NT$0 List_sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TS.oldBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              String RESULT =null;
TS.newBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= PRINT AP exp CP PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Generator.GenPrint(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= List_var_dec PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= exp PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // List_sent ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= List_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // List_sent ::= List_sent sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


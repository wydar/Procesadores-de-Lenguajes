import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

action code{:

  String arDec="";
  int arDecUSe=0;
  String arDecTam="";
  String arDecTemp="";
  ArrayList<String> arAsig = new ArrayList<String>();

  int arDim=0;
  String [] arTam = new String [10];
  String mulArId="";

  :}

/*Terminales*/
terminal PRINT, PYC, AP, CP, ALL, CLL, COMA, AC, CC;
terminal MAS, MENOS, POR, DIV, ASIG, MENOSUNARIO, MASMAS, MENOSMENOS, MOD;
terminal MASEQ, MENOSEQ, POREQ, DIVEQ;
terminal IF, ELSE, SWITCH, CASE, BREAK;
terminal FOR, WHILE, DO, TO, DOWNTO, STEP;
terminal OR, AND, NOT, LT, LEQ, GT, GEQ, EQ, NEQ;
terminal INT, FLOAT;
terminal COMMENT;
//terminal CASTINT, CASTFLOAT;
terminal String IDENT, NUM, RNUM;

/*No terminales*/
non terminal String List_sent, sent, exp, part_else, List_var_dec, type, variable, idExp, prStep, varOrNum, arrayInit, arExp, moreDim_dec, array, moreDim;
non terminal DoubleTag cond, prWhile, prDo, prFor;
non terminal Integer BinOper;


/*Precedencias*/

precedence right ASIG, MASEQ, MENOSEQ, POREQ, DIVEQ;
precedence left PRINT;
precedence left OR, AND;
precedence left MAS, MENOS;
precedence left MOD,DIV, POR;
precedence left MENOSUNARIO;
precedence left NUM,IDENT;
precedence left IF,ELSE,AP,ALL,CC;


/*Gramatica*/

List_sent   ::= List_sent sent
            |
            ;

sent        ::= exp PYC
            | List_var_dec PYC
            | PRINT AP exp:e CP PYC           {:Generator.GenPrint(e); :}
            | ALL                             {:TS.newBlock(); :}
              List_sent CLL                   {:TS.oldBlock(); :}
            | IF AP cond:c CP                 {:Generator.GenLabel(c.getV()); :}
              sent                            {:c.setV(c.getF());
                                                c.setF(DoubleTag.newTag());
                                                Generator.GenGoto(c.getF());
                                                Generator.GenLabel(c.getV()); :}
              part_else                       {:Generator.GenLabel(c.getF()); :}
            | prWhile:aux                     {:Generator.GenLabel(aux.getV()); :}
              AP cond:c CP                    {:Generator.GenLabel(c.getV()); :}
              sent                            {:Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getF()); :}
            | prDo:aux                        {:Generator.GenLabel(aux.getV()); :}
              sent WHILE AP cond:c CP PYC     {:Generator.GenLabel(c.getV());
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getF()); :}
            | prFor:aux AP exp:e1             {:Generator.GenLabel(aux.getV()); :}
              PYC cond:c                      {:Generator.GenLabel(aux.getF()); :}
              PYC exp:e2 CP                   {:Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getV()); :}
              sent                            {:Generator.GenGoto(aux.getF());
                                                Generator.GenLabel(c.getF()); :}
            | prFor:aux exp:e1 TO  exp:e2
              prStep:step prDo:aux2           {:Generator.GenLabel(aux.getV());
                                                Generator.GenCondForDownTo(e1,e2,aux2,false);
                                                Generator.GenLabel(aux.getF());
                                                Generator.GenBinOper(e1,Generator.MAS,step,e1);
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(aux2.getV()); :}
              ALL sent CLL                    {:Generator.GenGoto(aux.getF());
                                                Generator.GenLabel(aux2.getF()); :}
            | prFor:aux exp:e1 DOWNTO exp:e2
              prStep:step prDo:aux2           {:Generator.GenLabel(aux.getV());
                                                Generator.GenCondForDownTo(e1,e2,aux2,true);
                                                Generator.GenLabel(aux.getF());
                                                Generator.GenBinOper(e1,Generator.MENOS,step,e1);
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(aux2.getV()); :}
              ALL sent CLL                     {:Generator.GenGoto(aux.getF());
                                                 Generator.GenLabel(aux2.getF()); :}
            | COMMENT                          {::}
            ;

part_else   ::= ELSE sent
            |
            ;

prWhile     ::= WHILE                           {:RESULT=new DoubleTag(); :}
            ;

prDo        ::= DO                              {:RESULT=new DoubleTag(); :}
            ;

prFor       ::= FOR                             {:RESULT=new DoubleTag(); :}
            ;

prStep      ::= STEP exp:e                      {:RESULT=e; :}
            |                                   {:RESULT="1"; :}
            ;


List_var_dec    ::= type:tp                     {:TS.auxType=tp; :}
                    variable
                  | List_var_dec COMA variable
                  ;

variable    ::= IDENT:id                         {:if(TS.isDeclared(id,true)){
                                                   TS.error(1);
                                                   }else{
                                                     TS.add(id,TS.auxType);
                                                     RESULT=id;
                                                   } :}
            | IDENT:id ASIG exp:e                {:if(TS.isDeclared(id,true)){
                                                    TS.error(1);
                                                    }else{
                                                      TS.add(id,TS.auxType);
                                                      RESULT=Generator.GenAsig(TS.varBlock(id),e);
                                                    }  :}
            | IDENT:id AC varOrNum:vn CC         {:if(Generator.seeType(vn)==1){
                                                   TS.error(0);
                                                   }else{
                                                     arTam[arDim]=vn;
                                                     arDim++;
                                                     }:}
              moreDim_dec                        {:if(TS.isDeclared(id,true)){
                                                   TS.error(1);
                                                   }else{
                                                     if(arDim==1){
                                                       TS.addArray(id,TS.auxType,arTam[0]);
                                                     }else{
                                                       TS.addMultiArray(id,TS.auxType,arTam,arDim);
                                                     }
                                                    RESULT=id;
                                                    arDec=id;
                                                    arDecUSe=0;
                                                    arDim=0;
                                                   } :}
              arrayInit                            {:PLXC.out.println("   $"+id+"_length = "+TS.getNode(id).getTam()+";"); :}
            ;


moreDim_dec ::= AC varOrNum:vn CC               {:if(Generator.seeType(vn)==1){
                                                  TS.error(0);
                                                  }else{
                                                    arTam[arDim]=vn;
                                                    arDim++;
                                                    }:}
                moreDim_dec
            |
            ;

arrayInit   ::= ASIG                            {:arDecTemp=Generator.newTag(TS.auxType); :}
                ALL arExp CLL                   {:String temp2=Generator.newTag(TS.auxType);
                                                  Generator.GenInitArrayPart2(arDecTemp,temp2,arDec,arDecUSe,false); :}
            |
            ;

arExp       ::= arExp COMA exp:e                {:Generator.GenInitArray(arDec,arDecTemp,arDecUSe,e);
                                                  arDecUSe++; :}
            | exp:e                             {:Generator.GenInitArray(arDec,arDecTemp,arDecUSe,e);
                                                  arDecUSe++; :}
            ;

type        ::= INT                             {:RESULT="INTEGER"; :}
            | FLOAT                             {:RESULT="FLOAT"; :}
            ;

exp         ::= exp:e1 MAS exp:e2               {:String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.MAS,e2,temp);
                                                  RESULT=temp; :}
            | exp:e1 MENOS exp:e2               {:String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.MENOS,e2,temp);
                                                  RESULT=temp; :}
            | exp:e1 POR exp:e2                 {:String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.POR,e2,temp);
                                                  RESULT=temp; :}
            | exp:e1 DIV exp:e2                 {:String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.DIV,e2,temp);
                                                  RESULT=temp; :}
            | exp:e1 MOD exp:e2                 {:String temp = Generator.newTag("");
                                                  RESULT=Generator.GenBinOper(e1,Generator.MOD,e2,temp); :}
            | MENOS exp:e                       {:String temp = Generator.newTag("");
                                                  Generator.GenBinOper(null,Generator.MENOSUNARIO,e,temp);
                                                  RESULT=temp; :}%prec MENOSUNARIO
            | idExp:id ASIG exp:e               {:RESULT=Generator.GenAsig(TS.varBlock(id),e); :}
            | AP exp:e CP                       {:RESULT=e; :}
            | idExp:id                          {:RESULT=id; :}
            | MASMAS idExp:id                   {:RESULT=Generator.GenIncDec(TS.varBlock(id),true,true); :}
            | idExp:id MASMAS                   {:RESULT=Generator.GenIncDec(TS.varBlock(id),false,true); :}
            | MENOSMENOS idExp:id               {:RESULT=Generator.GenIncDec(TS.varBlock(id),true,false); :}
            | idExp:id MENOSMENOS               {:RESULT=Generator.GenIncDec(TS.varBlock(id),false,false); :}
            | NUM:n                             {:RESULT=n; :}
            | RNUM:rn                           {:RESULT=rn; :}
            | array:a                           {:RESULT=a; :}
            | varOrNum:vn MASEQ exp:e           {:Generator.GenUnicOper(vn,Generator.MASEQ,e);
                                                  RESULT=vn;:}
            | varOrNum:vn MENOSEQ exp:e         {:Generator.GenUnicOper(vn,Generator.MENOSEQ,e);
                                                  RESULT=vn;:}
            | varOrNum:vn POREQ exp:e           {:Generator.GenUnicOper(vn,Generator.POREQ,e);
                                                  RESULT=vn;:}
            | varOrNum:vn DIVEQ exp:e           {:Generator.GenUnicOper(vn,Generator.DIVEQ,e);
                                                  RESULT=vn;:}
            | idExp:id AC exp:e1 CC ASIG exp:e2 {:Generator.GenAsigArray(id,e1,e2); :}
            | idExp:id ASIG                     {:Node nod =TS.getNode(id);
                                                  if(!nod.getIsArray()){
                                                    TS.error(3);
                                                    }else{
                                                      arDec=id;
                                                      arDecUSe=0;
                                                      }
                                                  arDecTemp=Generator.newTag(TS.auxType); :}
                ALL arExp CLL                   {:String temp2=Generator.newTag(TS.auxType);
                                                  Generator.GenInitArrayPart2(arDecTemp,temp2,arDec,arDecUSe,true);
                                                  RESULT=id; :}
            | array:a ASIG exp:e                {:String temp = Generator.newTag("");
                                                  Generator.GenAsigMultiArray(mulArId,temp,e); :}
            ;

idExp       ::= IDENT:id                          {:if(!TS.isDeclared(id,false)){
                                                    TS.error(2);
                                                    }else{
                                                      RESULT=TS.varBlock(id);
                                                  } :}
            ;

varOrNum    ::= IDENT:id                          {:if(!TS.isDeclared(id,false)){
                                                    TS.error(2);
                                                    }else{
                                                      RESULT=TS.varBlock(id);
                                                  } :}
            | NUM:n                               {:RESULT=n; :}
            ;

cond        ::= exp:e1 LT exp:e2                {:RESULT=Generator.GenCond(e1,Generator.LT,e2); :}
            | exp:e1 LEQ exp:e2                 {:RESULT=Generator.GenCond(e1,Generator.LEQ,e2); :}
            | exp:e1 EQ exp:e2                  {:RESULT=Generator.GenCond(e1,Generator.EQ,e2); :}
            | exp:e1 GEQ exp:e2                 {:RESULT=Generator.GenCond(e1,Generator.GEQ,e2); :}
            | exp:e1 GT exp:e2                  {:RESULT=Generator.GenCond(e1,Generator.GT,e2); :}
            | exp:e1 NEQ exp:e2                 {:RESULT=Generator.GenCond(e1,Generator.NEQ,e2); :}
            | NOT cond:c                        {:String aux = c.getV();
                                                  c.setV(c.getF());
                                                  c.setF(aux);
                                                  RESULT=c; :}
            | cond:c1 AND                       {:Generator.GenLabel(c1.getV()); :}
              cond:c2                           {:Generator.GenLabel(c1.getF());
                                                  Generator.GenGoto(c2.getF());
                                                  RESULT=c2; :}
            | cond:c1 OR                        {:Generator.GenLabel(c1.getF()); :}
              cond:c2                           {:Generator.GenLabel(c1.getV());
                                                  Generator.GenGoto(c2.getV());
                                                  RESULT=c2; :}
            | AP cond:c CP                      {:RESULT=c; :}
            ;


array       ::=  idExp:id AC exp:e CC              {:arTam[arDim]=e;
                                                    arDim++; :}
                moreDim                           {:String temp = Generator.newTag("");
                                                    if(arDim>1){
                                                      RESULT=Generator.GenUseVarMultiArray(id,arTam,arDim,temp,false);
                                                      mulArId=id;
                                                    }else{
                                                      Generator.GenUseVarArray(id,e,temp);
                                                      RESULT=temp;
                                                    }
                                                    arDim=0; :}

              ;

moreDim       ::= AC exp:e CC moreDim         {:arTam[arDim]=e;
                                                arDim++; :}
              |
              ;

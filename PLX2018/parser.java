
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 03 17:15:48 CEST 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 03 17:15:48 CEST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\003\004\000\002\003\007" +
    "\000\002\037\002\000\002\003\006\000\002\040\002\000" +
    "\002\041\002\000\002\003\012\000\002\042\002\000\002" +
    "\043\002\000\002\003\011\000\002\044\002\000\002\003" +
    "\012\000\002\045\002\000\002\046\002\000\002\047\002" +
    "\000\002\003\016\000\002\050\002\000\002\003\014\000" +
    "\002\051\002\000\002\003\014\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\005\004\000\002\005" +
    "\002\000\002\030\003\000\002\031\003\000\002\032\003" +
    "\000\002\012\004\000\002\012\002\000\002\052\002\000" +
    "\002\006\005\000\002\006\005\000\002\010\003\000\002" +
    "\010\005\000\002\053\002\000\002\010\011\000\002\010" +
    "\003\000\002\016\006\000\002\016\002\000\002\054\002" +
    "\000\002\014\007\000\002\014\002\000\002\015\005\000" +
    "\002\015\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\004\005\000\002\004\005\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\003\000\002\004\003\000\002\004" +
    "\006\000\002\004\010\000\002\055\002\000\002\004\010" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\056\002\000\002\057\002\000\002" +
    "\060\002\000\002\004\012\000\002\061\002\000\002\004" +
    "\006\000\002\004\005\000\002\004\006\000\002\004\006" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\033\003\000\002\017\003\000\002\034" +
    "\003\000\002\011\003\000\002\013\003\000\002\013\003" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\004\000\002\062\002\000\002\027\006\000\002\063" +
    "\002\000\002\027\006\000\002\027\005\000\002\064\002" +
    "\000\002\023\013\000\002\065\002\000\002\020\010\000" +
    "\002\066\002\000\002\067\002\000\002\020\012\000\002" +
    "\070\002\000\002\021\006\000\002\021\002\000\002\036" +
    "\004\000\002\036\002\000\002\026\003\000\002\026\002" +
    "\000\002\035\003\000\002\024\004\000\002\071\002\000" +
    "\002\024\005\000\002\025\004\000\002\072\002\000\002" +
    "\025\005\000\002\073\002\000\002\022\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\066\002\uffff\004\uffff\006\uffff\010\uffff\017" +
    "\uffff\020\uffff\024\uffff\025\uffff\033\uffff\035\uffff\042\uffff" +
    "\043\uffff\044\uffff\052\uffff\061\uffff\062\uffff\063\uffff\066" +
    "\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074\uffff" +
    "\075\uffff\076\uffff\001\002\000\066\002\027\004\050\006" +
    "\045\010\044\017\031\020\011\024\005\025\006\033\026" +
    "\035\035\042\016\043\041\044\051\052\020\061\015\062" +
    "\042\063\013\066\017\067\010\070\040\071\037\072\052" +
    "\073\021\074\033\075\025\076\007\001\002\000\004\074" +
    "\242\001\002\000\004\074\242\001\002\000\064\005\uffbf" +
    "\007\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\026\uffbf\041\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\064\uffbf\001\002\000\006" +
    "\020\uffce\074\uffce\001\002\000\006\020\uff81\074\242\001" +
    "\002\000\006\005\373\012\372\001\002\000\100\002\uffe9" +
    "\004\uffe9\006\uffe9\010\uffe9\011\uffe9\017\uffe9\020\uffe9\024" +
    "\uffe9\025\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\042\uffe9\043\uffe9\044\uffe9\052\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9" +
    "\073\uffe9\074\uffe9\075\uffe9\076\uffe9\001\002\000\012\027" +
    "\363\030\365\031\364\032\362\001\002\000\006\020\uffd0" +
    "\074\uffd0\001\002\000\036\006\uffe2\017\uffe2\020\uffe2\024" +
    "\uffe2\025\uffe2\052\uffe2\066\uffe2\070\uffe2\071\uffe2\072\uffe2" +
    "\073\uffe2\074\uffe2\075\uffe2\076\uffe2\001\002\000\064\005" +
    "\uffac\007\uffac\011\uffac\012\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\026\uffac\041\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\064\uffac\001\002\000" +
    "\036\006\045\017\031\020\011\024\005\025\006\052\020" +
    "\066\017\070\040\071\037\072\052\073\021\074\033\075" +
    "\025\076\007\001\002\000\036\006\045\017\031\020\011" +
    "\024\005\025\006\052\020\066\017\070\040\071\037\072" +
    "\052\073\021\074\033\075\025\076\007\001\002\000\066" +
    "\005\uffad\007\uffad\011\uffad\012\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\353\026\uffad\041\uffad" +
    "\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\064\uffad" +
    "\001\002\000\070\002\001\004\001\006\001\010\001\011" +
    "\001\017\001\020\001\024\001\025\001\033\001\035\001" +
    "\042\001\043\001\044\001\052\001\061\001\062\001\063" +
    "\001\066\001\067\001\070\001\071\001\072\001\073\001" +
    "\074\001\075\001\076\001\001\002\000\064\004\ufff3\006" +
    "\ufff3\010\ufff3\017\ufff3\020\ufff3\024\ufff3\025\ufff3\033\ufff3" +
    "\035\ufff3\042\ufff3\043\ufff3\044\ufff3\052\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\073\ufff3\074\ufff3\075\ufff3\076\ufff3\001\002\000\074\005" +
    "\uffc0\007\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\026\uffc0\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\041\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\064\uffc0\001\002\000\004\006\333\001\002" +
    "\000\004\002\000\001\002\000\004\006\ufff6\001\002\000" +
    "\036\006\045\017\031\020\011\024\005\025\006\052\020" +
    "\066\017\070\040\071\037\072\052\073\021\074\033\075" +
    "\025\076\007\001\002\000\004\006\270\001\002\000\104" +
    "\005\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\024\uffa3" +
    "\025\uffa3\026\uffa3\027\uffa2\030\uffa2\031\uffa2\032\uffa2\041" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\064" +
    "\uffa3\001\002\000\036\006\224\017\031\020\011\024\005" +
    "\025\006\052\020\066\017\070\040\071\037\072\052\073" +
    "\021\074\033\075\025\076\007\001\002\000\004\006\uff86" +
    "\001\002\000\100\002\uffe7\004\uffe7\006\uffe7\010\uffe7\011" +
    "\uffe7\017\uffe7\020\uffe7\024\uffe7\025\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\052\uffe7\061\uffe7\062\uffe7\063\uffe7\066\uffe7\067\uffe7" +
    "\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076" +
    "\uffe7\001\002\000\036\006\045\017\031\020\011\024\005" +
    "\025\006\052\020\066\017\070\040\071\037\072\052\073" +
    "\021\074\033\075\025\076\007\001\002\000\036\006\045" +
    "\017\031\020\011\024\005\025\006\052\020\066\017\070" +
    "\040\071\037\072\052\073\021\074\033\075\025\076\007" +
    "\001\002\000\004\006\uffe4\001\002\000\006\020\uffcf\074" +
    "\uffcf\001\002\000\010\041\176\050\177\051\174\001\002" +
    "\000\066\004\ufffb\006\ufffb\010\ufffb\011\ufffb\017\ufffb\020" +
    "\ufffb\024\ufffb\025\ufffb\033\ufffb\035\ufffb\042\ufffb\043\ufffb" +
    "\044\ufffb\052\ufffb\061\ufffb\062\ufffb\063\ufffb\066\ufffb\067" +
    "\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb" +
    "\076\ufffb\001\002\000\036\006\045\017\031\020\011\024" +
    "\005\025\006\052\020\066\017\070\040\071\037\072\052" +
    "\073\021\074\033\075\025\076\007\001\002\000\100\002" +
    "\uffe8\004\uffe8\006\uffe8\010\uffe8\011\uffe8\017\uffe8\020\uffe8" +
    "\024\uffe8\025\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\052\uffe8\061\uffe8" +
    "\062\uffe8\063\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\001\002\000\034" +
    "\005\171\016\075\017\070\020\072\021\100\026\071\053" +
    "\103\054\104\055\077\056\102\057\074\060\073\064\101" +
    "\001\002\000\004\006\165\001\002\000\064\004\uffe3\006" +
    "\uffe3\010\uffe3\017\uffe3\020\uffe3\024\uffe3\025\uffe3\033\uffe3" +
    "\035\uffe3\042\uffe3\043\uffe3\044\uffe3\052\uffe3\061\uffe3\062" +
    "\uffe3\063\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3" +
    "\073\uffe3\074\uffe3\075\uffe3\076\uffe3\001\002\000\036\006" +
    "\045\017\031\020\011\024\005\025\006\052\020\066\017" +
    "\070\040\071\037\072\052\073\021\074\033\075\025\076" +
    "\007\001\002\000\074\005\uffc5\007\uffc5\011\uffc5\012\uffc5" +
    "\013\147\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\150\024\146\025\145\026\uffc5\041\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\064\uffc5\001\002" +
    "\000\006\020\uffdf\074\uffdf\001\002\000\006\020\061\074" +
    "\060\001\002\000\006\005\uffd8\012\uffd8\001\002\000\006" +
    "\005\uffde\012\uffde\001\002\000\012\005\uffdc\012\uffdc\013" +
    "\065\022\066\001\002\000\006\020\uff84\074\062\001\002" +
    "\000\006\005\uff85\012\uff85\001\002\000\004\020\061\001" +
    "\002\000\006\005\uff83\012\uff83\001\002\000\006\074\123" +
    "\075\122\001\002\000\036\006\045\017\031\020\011\024" +
    "\005\025\006\052\020\066\017\070\040\071\037\072\052" +
    "\073\021\074\033\075\025\076\007\001\002\000\036\005" +
    "\uffdb\012\uffdb\016\075\017\070\020\072\021\100\026\071" +
    "\053\103\054\104\055\077\056\102\057\074\060\073\064" +
    "\101\001\002\000\036\006\045\017\031\020\011\024\005" +
    "\025\006\052\020\066\017\070\040\071\037\072\052\073" +
    "\021\074\033\075\025\076\007\001\002\000\036\006\045" +
    "\017\031\020\011\024\005\025\006\052\020\066\017\070" +
    "\040\071\037\072\052\073\021\074\033\075\025\076\007" +
    "\001\002\000\036\006\045\017\031\020\011\024\005\025" +
    "\006\052\020\066\017\070\040\071\037\072\052\073\021" +
    "\074\033\075\025\076\007\001\002\000\036\006\045\017" +
    "\031\020\011\024\005\025\006\052\020\066\017\070\040" +
    "\071\037\072\052\073\021\074\033\075\025\076\007\001" +
    "\002\000\036\006\045\017\031\020\011\024\005\025\006" +
    "\052\020\066\017\070\040\071\037\072\052\073\021\074" +
    "\033\075\025\076\007\001\002\000\036\006\045\017\031" +
    "\020\011\024\005\025\006\052\020\066\017\070\040\071" +
    "\037\072\052\073\021\074\033\075\025\076\007\001\002" +
    "\000\036\006\uffb2\017\uffb2\020\uffb2\024\uffb2\025\uffb2\052" +
    "\uffb2\066\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\001\002\000\036\006\045\017\031\020" +
    "\011\024\005\025\006\052\020\066\017\070\040\071\037" +
    "\072\052\073\021\074\033\075\025\076\007\001\002\000" +
    "\036\006\045\017\031\020\011\024\005\025\006\052\020" +
    "\066\017\070\040\071\037\072\052\073\021\074\033\075" +
    "\025\076\007\001\002\000\036\006\uffa4\017\uffa4\020\uffa4" +
    "\024\uffa4\025\uffa4\052\uffa4\066\uffa4\070\uffa4\071\uffa4\072" +
    "\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\001\002\000\036" +
    "\006\045\017\031\020\011\024\005\025\006\052\020\066" +
    "\017\070\040\071\037\072\052\073\021\074\033\075\025" +
    "\076\007\001\002\000\036\006\045\017\031\020\011\024" +
    "\005\025\006\052\020\066\017\070\040\071\037\072\052" +
    "\073\021\074\033\075\025\076\007\001\002\000\036\006" +
    "\045\017\031\020\011\024\005\025\006\052\020\066\017" +
    "\070\040\071\037\072\052\073\021\074\033\075\025\076" +
    "\007\001\002\000\044\005\uff9f\007\uff9f\016\075\017\070" +
    "\020\072\021\100\026\071\041\uff9f\050\uff9f\051\uff9f\053" +
    "\103\054\104\055\077\056\102\057\074\060\073\064\101" +
    "\001\002\000\044\005\uffa0\007\uffa0\016\075\017\070\020" +
    "\072\021\100\026\071\041\uffa0\050\uffa0\051\uffa0\053\103" +
    "\054\104\055\077\056\102\057\074\060\073\064\101\001" +
    "\002\000\044\005\uff9d\007\uff9d\016\075\017\070\020\072" +
    "\021\100\026\071\041\uff9d\050\uff9d\051\uff9d\053\103\054" +
    "\104\055\077\056\102\057\074\060\073\064\101\001\002" +
    "\000\064\005\uffca\007\uffca\011\uffca\012\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\026\uffca\041\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\064\uffca" +
    "\001\002\000\044\005\uff9c\007\uff9c\016\075\017\070\020" +
    "\072\021\100\026\071\041\uff9c\050\uff9c\051\uff9c\053\103" +
    "\054\104\055\077\056\102\057\074\060\073\064\101\001" +
    "\002\000\036\006\045\017\031\020\011\024\005\025\006" +
    "\052\020\066\017\070\040\071\037\072\052\073\021\074" +
    "\033\075\025\076\007\001\002\000\064\005\uffb1\007\uffb1" +
    "\011\uffb1\012\uffb1\014\uffb1\015\uffb1\016\075\017\070\020" +
    "\072\021\100\026\071\041\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\053\103\054\104\055\077\056" +
    "\102\057\074\060\073\064\101\001\002\000\064\005\uffcd" +
    "\007\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\072\021\100\026\071\041\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\064\uffcd\001\002\000\044" +
    "\005\uff9e\007\uff9e\016\075\017\070\020\072\021\100\026" +
    "\071\041\uff9e\050\uff9e\051\uff9e\053\103\054\104\055\077" +
    "\056\102\057\074\060\073\064\101\001\002\000\044\005" +
    "\uff9b\007\uff9b\016\075\017\070\020\072\021\100\026\071" +
    "\041\uff9b\050\uff9b\051\uff9b\053\103\054\104\055\077\056" +
    "\102\057\074\060\073\064\101\001\002\000\064\005\uffcb" +
    "\007\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\026\uffcb\041\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\064\uffcb\001\002\000\064" +
    "\005\uffc9\007\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\026\uffc9\041\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\064\uffc9\001\002" +
    "\000\064\005\uffcc\007\uffcc\011\uffcc\012\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\072\021\100\026\071\041\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\064\uffcc" +
    "\001\002\000\064\005\uffa1\007\uffa1\011\uffa1\012\uffa1\014" +
    "\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\026\uffa1" +
    "\041\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\064\uffa1\001\002\000\064\005\uffa2\007\uffa2\011\uffa2\012" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\026\uffa2\041\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\064\uffa2\001\002\000\004\014\125\001\002\000" +
    "\012\005\uffd6\012\uffd6\013\127\022\uffd6\001\002\000\010" +
    "\005\uffda\012\uffda\022\uffda\001\002\000\006\074\123\075" +
    "\122\001\002\000\004\014\131\001\002\000\012\005\uffd6" +
    "\012\uffd6\013\127\022\uffd6\001\002\000\010\005\uffd7\012" +
    "\uffd7\022\uffd7\001\002\000\010\005\uffd3\012\uffd3\022\135" +
    "\001\002\000\006\005\uffd9\012\uffd9\001\002\000\004\010" +
    "\uffd5\001\002\000\004\010\137\001\002\000\036\006\045" +
    "\017\031\020\011\024\005\025\006\052\020\066\017\070" +
    "\040\071\037\072\052\073\021\074\033\075\025\076\007" +
    "\001\002\000\036\011\uffd1\012\uffd1\016\075\017\070\020" +
    "\072\021\100\026\071\053\103\054\104\055\077\056\102" +
    "\057\074\060\073\064\101\001\002\000\006\011\143\012" +
    "\142\001\002\000\036\006\045\017\031\020\011\024\005" +
    "\025\006\052\020\066\017\070\040\071\037\072\052\073" +
    "\021\074\033\075\025\076\007\001\002\000\006\005\uffd4" +
    "\012\uffd4\001\002\000\036\011\uffd2\012\uffd2\016\075\017" +
    "\070\020\072\021\100\026\071\053\103\054\104\055\077" +
    "\056\102\057\074\060\073\064\101\001\002\000\064\005" +
    "\uffc1\007\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\026\uffc1\041\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\064\uffc1\001\002\000" +
    "\064\005\uffc3\007\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\026\uffc3\041\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\064\uffc3\001" +
    "\002\000\036\006\045\017\031\020\011\024\005\025\006" +
    "\052\020\066\017\070\040\071\037\072\052\073\021\074" +
    "\033\075\025\076\007\001\002\000\042\006\045\010\uffbc" +
    "\017\031\020\011\024\005\025\006\052\020\065\153\066" +
    "\017\070\040\071\037\072\052\073\021\074\033\075\025" +
    "\076\007\001\002\000\004\010\155\001\002\000\064\005" +
    "\uffc7\007\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016\075" +
    "\017\070\020\072\021\100\026\071\041\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\053\103\054\104" +
    "\055\077\056\102\057\074\060\073\064\101\001\002\000" +
    "\006\074\123\075\122\001\002\000\064\005\uffaf\007\uffaf" +
    "\011\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\026\uffaf\041\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\064\uffaf\001\002\000\036\006\045" +
    "\017\031\020\011\024\005\025\006\052\020\066\017\070" +
    "\040\071\037\072\052\073\021\074\033\075\025\076\007" +
    "\001\002\000\006\011\157\012\142\001\002\000\064\005" +
    "\uffbb\007\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\026\uffbb\041\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\060\uffbb\064\uffbb\001\002\000" +
    "\034\014\161\016\075\017\070\020\072\021\100\026\071" +
    "\053\103\054\104\055\077\056\102\057\074\060\073\064" +
    "\101\001\002\000\066\005\uffbe\007\uffbe\011\uffbe\012\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\162\026\uffbe\041\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\064\uffbe\001\002\000\036\006\045\017\031" +
    "\020\011\024\005\025\006\052\020\066\017\070\040\071" +
    "\037\072\052\073\021\074\033\075\025\076\007\001\002" +
    "\000\064\005\uffbd\007\uffbd\011\uffbd\012\uffbd\014\uffbd\015" +
    "\uffbd\016\075\017\070\020\072\021\100\026\071\041\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\053" +
    "\103\054\104\055\077\056\102\057\074\060\073\064\101" +
    "\001\002\000\064\005\uffaa\007\uffaa\011\uffaa\012\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\026\uffaa" +
    "\041\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa" +
    "\064\uffaa\001\002\000\036\006\045\017\031\020\011\024" +
    "\005\025\006\052\020\066\017\070\040\071\037\072\052" +
    "\073\021\074\033\075\025\076\007\001\002\000\034\007" +
    "\167\016\075\017\070\020\072\021\100\026\071\053\103" +
    "\054\104\055\077\056\102\057\074\060\073\064\101\001" +
    "\002\000\004\005\170\001\002\000\100\002\ufffc\004\ufffc" +
    "\006\ufffc\010\ufffc\011\ufffc\017\ufffc\020\ufffc\024\ufffc\025" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\052\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc" +
    "\074\ufffc\075\ufffc\076\ufffc\001\002\000\100\002\ufffe\004" +
    "\ufffe\006\ufffe\010\ufffe\011\ufffe\017\ufffe\020\ufffe\024\ufffe" +
    "\025\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\052\ufffe\061\ufffe\062\ufffe" +
    "\063\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073" +
    "\ufffe\074\ufffe\075\ufffe\076\ufffe\001\002\000\034\007\215" +
    "\016\075\017\070\020\072\021\100\026\071\053\103\054" +
    "\104\055\077\056\102\057\074\060\073\064\101\001\002" +
    "\000\012\007\200\041\176\050\177\051\174\001\002\000" +
    "\036\006\uff99\017\uff99\020\uff99\024\uff99\025\uff99\052\uff99" +
    "\066\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075" +
    "\uff99\076\uff99\001\002\000\036\006\uffb6\017\uffb6\020\uffb6" +
    "\024\uffb6\025\uffb6\052\uffb6\066\uffb6\070\uffb6\071\uffb6\072" +
    "\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\001\002\000\036" +
    "\006\uffa6\017\uffa6\020\uffa6\024\uffa6\025\uffa6\052\uffa6\066" +
    "\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\001\002\000\036\006\uff97\017\uff97\020\uff97\024" +
    "\uff97\025\uff97\052\uff97\066\uff97\070\uff97\071\uff97\072\uff97" +
    "\073\uff97\074\uff97\075\uff97\076\uff97\001\002\000\014\005" +
    "\uff95\007\uff95\041\uff95\050\uff95\051\uff95\001\002\000\036" +
    "\006\045\017\031\020\011\024\005\025\006\052\020\066" +
    "\017\070\040\071\037\072\052\073\021\074\033\075\025" +
    "\076\007\001\002\000\032\016\075\017\070\020\072\021" +
    "\100\026\071\053\103\054\104\055\077\056\102\057\074" +
    "\060\073\064\101\001\002\000\014\005\uff96\007\uff96\041" +
    "\uff96\050\uff96\051\uff96\001\002\000\036\006\045\017\031" +
    "\020\011\024\005\025\006\052\020\066\017\070\040\071" +
    "\037\072\052\073\021\074\033\075\025\076\007\001\002" +
    "\000\034\015\uffb5\016\075\017\070\020\072\021\100\026" +
    "\071\053\103\054\104\055\077\056\102\057\074\060\073" +
    "\064\101\001\002\000\004\015\207\001\002\000\036\006" +
    "\uffa5\017\uffa5\020\uffa5\024\uffa5\025\uffa5\052\uffa5\066\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076" +
    "\uffa5\001\002\000\036\006\uffb4\017\uffb4\020\uffb4\024\uffb4" +
    "\025\uffb4\052\uffb4\066\uffb4\070\uffb4\071\uffb4\072\uffb4\073" +
    "\uffb4\074\uffb4\075\uffb4\076\uffb4\001\002\000\036\006\045" +
    "\017\031\020\011\024\005\025\006\052\020\066\017\070" +
    "\040\071\037\072\052\073\021\074\033\075\025\076\007" +
    "\001\002\000\064\005\uffb3\007\uffb3\011\uffb3\012\uffb3\014" +
    "\uffb3\015\uffb3\016\075\017\070\020\072\021\100\026\071" +
    "\041\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\053\103\054\104\055\077\056\102\057\074\060\073" +
    "\064\101\001\002\000\036\006\045\017\031\020\011\024" +
    "\005\025\006\052\020\066\017\070\040\071\037\072\052" +
    "\073\021\074\033\075\025\076\007\001\002\000\014\005" +
    "\uff98\007\uff98\041\uff98\050\uff98\051\uff98\001\002\000\064" +
    "\005\uffc6\007\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\026\uffc6\041\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\064\uffc6\001\002" +
    "\000\066\004\uffff\006\uffff\010\uffff\011\uffff\017\uffff\020" +
    "\uffff\024\uffff\025\uffff\033\uffff\035\uffff\042\uffff\043\uffff" +
    "\044\uffff\052\uffff\061\uffff\062\uffff\063\uffff\066\uffff\067" +
    "\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074\uffff\075\uffff" +
    "\076\uffff\001\002\000\066\004\050\006\045\010\044\011" +
    "\220\017\031\020\011\024\005\025\006\033\026\035\035" +
    "\042\016\043\041\044\051\052\020\061\015\062\042\063" +
    "\013\066\017\067\010\070\040\071\037\072\052\073\021" +
    "\074\033\075\025\076\007\001\002\000\100\002\ufffa\004" +
    "\ufffa\006\ufffa\010\ufffa\011\ufffa\017\ufffa\020\ufffa\024\ufffa" +
    "\025\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\042\ufffa\043\ufffa\044\ufffa\052\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073" +
    "\ufffa\074\ufffa\075\ufffa\076\ufffa\001\002\000\064\005\uffa7" +
    "\007\uffa7\011\uffa7\012\uffa7\014\uffa7\015\uffa7\016\075\017" +
    "\070\020\072\021\100\026\071\041\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\050\uffa7\051\uffa7\053\103\054\104\055" +
    "\077\056\102\057\074\060\073\064\101\001\002\000\064" +
    "\005\uffab\007\uffab\011\uffab\012\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\026\uffab\041\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\064\uffab\001\002" +
    "\000\036\016\075\017\070\020\072\021\100\026\071\045" +
    "\246\046\247\053\103\054\104\055\077\056\102\057\074" +
    "\060\073\064\101\001\002\000\036\006\045\017\031\020" +
    "\011\024\005\025\006\052\020\066\017\070\040\071\037" +
    "\072\052\073\021\074\033\075\025\076\007\001\002\000" +
    "\050\005\uffc5\007\uffc5\013\147\015\240\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\150\024\146\025\145\026\uffc5\053" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\064\uffc5" +
    "\001\002\000\036\005\ufff1\007\215\016\075\017\070\020" +
    "\072\021\100\026\071\053\103\054\104\055\077\056\102" +
    "\057\074\060\073\064\101\001\002\000\004\005\230\001" +
    "\002\000\036\006\045\017\031\020\011\024\005\025\006" +
    "\052\020\066\017\070\040\071\037\072\052\073\021\074" +
    "\033\075\025\076\007\001\002\000\012\005\ufff0\041\176" +
    "\050\177\051\174\001\002\000\004\005\233\001\002\000" +
    "\036\006\045\017\031\020\011\024\005\025\006\052\020" +
    "\066\017\070\040\071\037\072\052\073\021\074\033\075" +
    "\025\076\007\001\002\000\034\007\235\016\075\017\070" +
    "\020\072\021\100\026\071\053\103\054\104\055\077\056" +
    "\102\057\074\060\073\064\101\001\002\000\064\004\uffef" +
    "\006\uffef\010\uffef\017\uffef\020\uffef\024\uffef\025\uffef\033" +
    "\uffef\035\uffef\042\uffef\043\uffef\044\uffef\052\uffef\061\uffef" +
    "\062\uffef\063\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072" +
    "\uffef\073\uffef\074\uffef\075\uffef\076\uffef\001\002\000\064" +
    "\004\050\006\045\010\044\017\031\020\011\024\005\025" +
    "\006\033\026\035\035\042\016\043\041\044\051\052\020" +
    "\061\015\062\042\063\013\066\017\067\010\070\040\071" +
    "\037\072\052\073\021\074\033\075\025\076\007\001\002" +
    "\000\100\002\uffee\004\uffee\006\uffee\010\uffee\011\uffee\017" +
    "\uffee\020\uffee\024\uffee\025\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\052" +
    "\uffee\061\uffee\062\uffee\063\uffee\066\uffee\067\uffee\070\uffee" +
    "\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee\001" +
    "\002\000\004\074\242\001\002\000\004\007\243\001\002" +
    "\000\066\005\uffa3\007\uffa3\011\uffa3\012\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\026\uffa3" +
    "\041\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\064\uffa3\001\002\000\064\004\uff7f\006\uff7f\010\uff7f\017" +
    "\uff7f\020\uff7f\024\uff7f\025\uff7f\033\uff7f\035\uff7f\042\uff7f" +
    "\043\uff7f\044\uff7f\052\uff7f\061\uff7f\062\uff7f\063\uff7f\066" +
    "\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f" +
    "\075\uff7f\076\uff7f\001\002\000\064\004\050\006\045\010" +
    "\044\017\031\020\011\024\005\025\006\033\026\035\035" +
    "\042\016\043\041\044\051\052\020\061\015\062\042\063" +
    "\013\066\017\067\010\070\040\071\037\072\052\073\021" +
    "\074\033\075\025\076\007\001\002\000\100\002\uff7e\004" +
    "\uff7e\006\uff7e\010\uff7e\011\uff7e\017\uff7e\020\uff7e\024\uff7e" +
    "\025\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040" +
    "\uff7e\042\uff7e\043\uff7e\044\uff7e\052\uff7e\061\uff7e\062\uff7e" +
    "\063\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073" +
    "\uff7e\074\uff7e\075\uff7e\076\uff7e\001\002\000\036\006\045" +
    "\017\031\020\011\024\005\025\006\052\020\066\017\070" +
    "\040\071\037\072\052\073\021\074\033\075\025\076\007" +
    "\001\002\000\036\006\045\017\031\020\011\024\005\025" +
    "\006\052\020\066\017\070\040\071\037\072\052\073\021" +
    "\074\033\075\025\076\007\001\002\000\036\016\075\017" +
    "\070\020\072\021\100\026\071\044\uffe0\047\251\053\103" +
    "\054\104\055\077\056\102\057\074\060\073\064\101\001" +
    "\002\000\036\006\045\017\031\020\011\024\005\025\006" +
    "\052\020\066\017\070\040\071\037\072\052\073\021\074" +
    "\033\075\025\076\007\001\002\000\004\044\051\001\002" +
    "\000\004\010\uffeb\001\002\000\004\010\255\001\002\000" +
    "\064\004\050\006\045\010\044\017\031\020\011\024\005" +
    "\025\006\033\026\035\035\042\016\043\041\044\051\052" +
    "\020\061\015\062\042\063\013\066\017\067\010\070\040" +
    "\071\037\072\052\073\021\074\033\075\025\076\007\001" +
    "\002\000\004\011\257\001\002\000\100\002\uffea\004\uffea" +
    "\006\uffea\010\uffea\011\uffea\017\uffea\020\uffea\024\uffea\025" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\042\uffea\043\uffea\044\uffea\052\uffea\061\uffea\062\uffea\063" +
    "\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea" +
    "\074\uffea\075\uffea\076\uffea\001\002\000\034\016\075\017" +
    "\070\020\072\021\100\026\071\044\uffe1\053\103\054\104" +
    "\055\077\056\102\057\074\060\073\064\101\001\002\000" +
    "\036\016\075\017\070\020\072\021\100\026\071\044\uffe0" +
    "\047\251\053\103\054\104\055\077\056\102\057\074\060" +
    "\073\064\101\001\002\000\004\044\051\001\002\000\004" +
    "\010\uffed\001\002\000\004\010\265\001\002\000\064\004" +
    "\050\006\045\010\044\017\031\020\011\024\005\025\006" +
    "\033\026\035\035\042\016\043\041\044\051\052\020\061" +
    "\015\062\042\063\013\066\017\067\010\070\040\071\037" +
    "\072\052\073\021\074\033\075\025\076\007\001\002\000" +
    "\004\011\267\001\002\000\100\002\uffec\004\uffec\006\uffec" +
    "\010\uffec\011\uffec\017\uffec\020\uffec\024\uffec\025\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec" +
    "\043\uffec\044\uffec\052\uffec\061\uffec\062\uffec\063\uffec\066" +
    "\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec" +
    "\075\uffec\076\uffec\001\002\000\036\006\045\017\031\020" +
    "\011\024\005\025\006\052\020\066\017\070\040\071\037" +
    "\072\052\073\021\074\033\075\025\076\007\001\002\000" +
    "\034\007\272\016\075\017\070\020\072\021\100\026\071" +
    "\053\103\054\104\055\077\056\102\057\074\060\073\064" +
    "\101\001\002\000\004\010\uff94\001\002\000\004\010\274" +
    "\001\002\000\004\036\276\001\002\000\010\011\uff8b\036" +
    "\311\040\307\001\002\000\036\006\045\017\031\020\011" +
    "\024\005\025\006\052\020\066\017\070\040\071\037\072" +
    "\052\073\021\074\033\075\025\076\007\001\002\000\034" +
    "\015\uff92\016\075\017\070\020\072\021\100\026\071\053" +
    "\103\054\104\055\077\056\102\057\074\060\073\064\101" +
    "\001\002\000\004\015\301\001\002\000\074\004\050\006" +
    "\045\010\044\011\uff87\017\031\020\011\024\005\025\006" +
    "\033\026\035\035\036\uff87\037\uff87\040\uff87\042\016\043" +
    "\041\044\051\052\020\061\015\062\042\063\013\066\017" +
    "\067\010\070\040\071\037\072\052\073\021\074\033\075" +
    "\025\076\007\001\002\000\012\011\uff88\036\uff88\037\uff88" +
    "\040\uff88\001\002\000\012\011\uff89\036\uff89\037\304\040" +
    "\uff89\001\002\000\004\005\306\001\002\000\010\011\uff91" +
    "\036\uff91\040\uff91\001\002\000\010\011\uff8a\036\uff8a\040" +
    "\uff8a\001\002\000\004\015\321\001\002\000\004\011\320" +
    "\001\002\000\036\006\uff90\017\uff90\020\uff90\024\uff90\025" +
    "\uff90\052\uff90\066\uff90\070\uff90\071\uff90\072\uff90\073\uff90" +
    "\074\uff90\075\uff90\076\uff90\001\002\000\036\006\045\017" +
    "\031\020\011\024\005\025\006\052\020\066\017\070\040" +
    "\071\037\072\052\073\021\074\033\075\025\076\007\001" +
    "\002\000\034\015\uff8f\016\075\017\070\020\072\021\100" +
    "\026\071\053\103\054\104\055\077\056\102\057\074\060" +
    "\073\064\101\001\002\000\004\015\315\001\002\000\074" +
    "\004\050\006\045\010\044\011\uff87\017\031\020\011\024" +
    "\005\025\006\033\026\035\035\036\uff87\037\uff87\040\uff87" +
    "\042\016\043\041\044\051\052\020\061\015\062\042\063" +
    "\013\066\017\067\010\070\040\071\037\072\052\073\021" +
    "\074\033\075\025\076\007\001\002\000\012\011\uff89\036" +
    "\uff89\037\304\040\uff89\001\002\000\010\011\uff8e\036\uff8e" +
    "\040\uff8e\001\002\000\100\002\uff93\004\uff93\006\uff93\010" +
    "\uff93\011\uff93\017\uff93\020\uff93\024\uff93\025\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\042\uff93\043" +
    "\uff93\044\uff93\052\uff93\061\uff93\062\uff93\063\uff93\066\uff93" +
    "\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075" +
    "\uff93\076\uff93\001\002\000\064\004\uff8d\006\uff8d\010\uff8d" +
    "\017\uff8d\020\uff8d\024\uff8d\025\uff8d\033\uff8d\035\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\052\uff8d\061\uff8d\062\uff8d\063\uff8d" +
    "\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074" +
    "\uff8d\075\uff8d\076\uff8d\001\002\000\064\004\050\006\045" +
    "\010\044\017\031\020\011\024\005\025\006\033\026\035" +
    "\035\042\016\043\041\044\051\052\020\061\015\062\042" +
    "\063\013\066\017\067\010\070\040\071\037\072\052\073" +
    "\021\074\033\075\025\076\007\001\002\000\004\011\uff8c" +
    "\001\002\000\064\005\uffc8\007\uffc8\011\uffc8\012\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\026\uffc8" +
    "\041\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\064\uffc8\001\002\000\004\006\326\001\002\000\036\006" +
    "\045\017\031\020\011\024\005\025\006\052\020\066\017" +
    "\070\040\071\037\072\052\073\021\074\033\075\025\076" +
    "\007\001\002\000\012\007\330\041\176\050\177\051\174" +
    "\001\002\000\064\004\ufff5\006\ufff5\010\ufff5\017\ufff5\020" +
    "\ufff5\024\ufff5\025\ufff5\033\ufff5\035\ufff5\042\ufff5\043\ufff5" +
    "\044\ufff5\052\ufff5\061\ufff5\062\ufff5\063\ufff5\066\ufff5\067" +
    "\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5" +
    "\076\ufff5\001\002\000\064\004\050\006\045\010\044\017" +
    "\031\020\011\024\005\025\006\033\026\035\035\042\016" +
    "\043\041\044\051\052\020\061\015\062\042\063\013\066" +
    "\017\067\010\070\040\071\037\072\052\073\021\074\033" +
    "\075\025\076\007\001\002\000\100\002\ufff4\004\ufff4\006" +
    "\ufff4\010\ufff4\011\ufff4\017\ufff4\020\ufff4\024\ufff4\025\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\052\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074" +
    "\ufff4\075\ufff4\076\ufff4\001\002\000\036\006\045\017\031" +
    "\020\011\024\005\025\006\052\020\066\017\070\040\071" +
    "\037\072\052\073\021\074\033\075\025\076\007\001\002" +
    "\000\012\007\335\041\176\050\177\051\174\001\002\000" +
    "\064\004\ufff9\006\ufff9\010\ufff9\017\ufff9\020\ufff9\024\ufff9" +
    "\025\ufff9\033\ufff9\035\ufff9\042\ufff9\043\ufff9\044\ufff9\052" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\066\ufff9\067\ufff9\070\ufff9" +
    "\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\001" +
    "\002\000\064\004\050\006\045\010\044\017\031\020\011" +
    "\024\005\025\006\033\026\035\035\042\016\043\041\044" +
    "\051\052\020\061\015\062\042\063\013\066\017\067\010" +
    "\070\040\071\037\072\052\073\021\074\033\075\025\076" +
    "\007\001\002\000\100\002\ufff8\004\ufff8\006\ufff8\010\ufff8" +
    "\011\ufff8\017\ufff8\020\ufff8\024\ufff8\025\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\052\ufff8\061\ufff8\062\ufff8\063\ufff8\066\ufff8\067" +
    "\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8" +
    "\076\ufff8\001\002\000\100\002\uffe5\004\uffe5\006\uffe5\010" +
    "\uffe5\011\uffe5\017\uffe5\020\uffe5\024\uffe5\025\uffe5\033\uffe5" +
    "\034\341\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\052\uffe5\061\uffe5\062\uffe5\063\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\076\uffe5\001\002\000\064\004\050\006\045\010\044" +
    "\017\031\020\011\024\005\025\006\033\026\035\035\042" +
    "\016\043\041\044\051\052\020\061\015\062\042\063\013" +
    "\066\017\067\010\070\040\071\037\072\052\073\021\074" +
    "\033\075\025\076\007\001\002\000\100\002\ufff7\004\ufff7" +
    "\006\ufff7\010\ufff7\011\ufff7\017\ufff7\020\ufff7\024\ufff7\025" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\052\ufff7\061\ufff7\062\ufff7\063" +
    "\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7" +
    "\074\ufff7\075\ufff7\076\ufff7\001\002\000\100\002\uffe6\004" +
    "\uffe6\006\uffe6\010\uffe6\011\uffe6\017\uffe6\020\uffe6\024\uffe6" +
    "\025\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\052\uffe6\061\uffe6\062\uffe6" +
    "\063\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\076\uffe6\001\002\000\064\004\050" +
    "\006\045\010\044\017\031\020\011\024\005\025\006\033" +
    "\026\035\035\042\016\043\041\044\051\052\020\061\015" +
    "\062\042\063\013\066\017\067\010\070\040\071\037\072" +
    "\052\073\021\074\033\075\025\076\007\001\002\000\004" +
    "\043\346\001\002\000\004\006\347\001\002\000\036\006" +
    "\045\017\031\020\011\024\005\025\006\052\020\066\017" +
    "\070\040\071\037\072\052\073\021\074\033\075\025\076" +
    "\007\001\002\000\012\007\351\041\176\050\177\051\174" +
    "\001\002\000\004\005\352\001\002\000\100\002\ufff2\004" +
    "\ufff2\006\ufff2\010\ufff2\011\ufff2\017\ufff2\020\ufff2\024\ufff2" +
    "\025\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\052\ufff2\061\ufff2\062\ufff2" +
    "\063\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\076\ufff2\001\002\000\040\006\045" +
    "\017\031\020\011\024\005\025\006\052\020\065\355\066" +
    "\017\070\040\071\037\072\052\073\021\074\033\075\025" +
    "\076\007\001\002\000\064\005\uffb0\007\uffb0\011\uffb0\012" +
    "\uffb0\014\uffb0\015\uffb0\016\075\017\070\020\072\021\100" +
    "\026\071\041\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\053\103\054\104\055\077\056\102\057\074" +
    "\060\073\064\101\001\002\000\006\074\123\075\122\001" +
    "\002\000\064\005\uffae\007\uffae\011\uffae\012\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\026\uffae\041" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\064" +
    "\uffae\001\002\000\064\005\uffa9\007\uffa9\011\uffa9\012\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\026" +
    "\uffa9\041\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\064\uffa9\001\002\000\064\005\uffa8\007\uffa8\011\uffa8" +
    "\012\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\026\uffa8\041\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\051\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\064\uffa8\001\002\000\014\005\uff9a\007\uff9a" +
    "\041\uff9a\050\uff9a\051\uff9a\001\002\000\036\006\045\017" +
    "\031\020\011\024\005\025\006\052\020\066\017\070\040" +
    "\071\037\072\052\073\021\074\033\075\025\076\007\001" +
    "\002\000\036\006\045\017\031\020\011\024\005\025\006" +
    "\052\020\066\017\070\040\071\037\072\052\073\021\074" +
    "\033\075\025\076\007\001\002\000\036\006\045\017\031" +
    "\020\011\024\005\025\006\052\020\066\017\070\040\071" +
    "\037\072\052\073\021\074\033\075\025\076\007\001\002" +
    "\000\036\006\045\017\031\020\011\024\005\025\006\052" +
    "\020\066\017\070\040\071\037\072\052\073\021\074\033" +
    "\075\025\076\007\001\002\000\064\005\uffb9\007\uffb9\011" +
    "\uffb9\012\uffb9\014\uffb9\015\uffb9\016\075\017\070\020\072" +
    "\021\100\026\071\041\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\053\103\054\104\055\077\056\102" +
    "\057\074\060\073\064\101\001\002\000\064\005\uffb8\007" +
    "\uffb8\011\uffb8\012\uffb8\014\uffb8\015\uffb8\016\075\017\070" +
    "\020\072\021\100\026\071\041\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\053\103\054\104\055\077" +
    "\056\102\057\074\060\073\064\101\001\002\000\064\005" +
    "\uffba\007\uffba\011\uffba\012\uffba\014\uffba\015\uffba\016\075" +
    "\017\070\020\072\021\100\026\071\041\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\053\103\054\104" +
    "\055\077\056\102\057\074\060\073\064\101\001\002\000" +
    "\064\005\uffb7\007\uffb7\011\uffb7\012\uffb7\014\uffb7\015\uffb7" +
    "\016\075\017\070\020\072\021\100\026\071\041\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\053\103" +
    "\054\104\055\077\056\102\057\074\060\073\064\101\001" +
    "\002\000\006\020\061\074\060\001\002\000\100\002\ufffd" +
    "\004\ufffd\006\ufffd\010\ufffd\011\ufffd\017\ufffd\020\ufffd\024" +
    "\ufffd\025\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\042\ufffd\043\ufffd\044\ufffd\052\ufffd\061\ufffd\062" +
    "\ufffd\063\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd" +
    "\073\ufffd\074\ufffd\075\ufffd\076\ufffd\001\002\000\006\005" +
    "\uffdd\012\uffdd\001\002\000\066\005\uff82\007\uff82\011\uff82" +
    "\012\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\021" +
    "\uff82\022\uff82\026\uff82\041\uff82\044\uff82\045\uff82\046\uff82" +
    "\047\uff82\050\uff82\051\uff82\053\uff82\054\uff82\055\uff82\056" +
    "\uff82\057\uff82\060\uff82\064\uff82\001\002\000\004\020\011" +
    "\001\002\000\066\005\uff80\007\uff80\011\uff80\012\uff80\014" +
    "\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80" +
    "\026\uff80\041\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80" +
    "\060\uff80\064\uff80\001\002\000\064\005\uffc2\007\uffc2\011" +
    "\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\026\uffc2\041\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\060\uffc2\064\uffc2\001\002\000\064\005\uffc4\007" +
    "\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\026\uffc4\041\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\064\uffc4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\002\003\001\001\000\036\003\022\004" +
    "\046\006\011\007\053\011\052\013\013\022\035\023\045" +
    "\025\021\027\042\030\027\031\023\032\033\035\031\001" +
    "\001\000\004\011\u0100\001\001\000\004\011\377\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\374\072" +
    "\375\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\357\011\052\013\013\025\021\027\360" +
    "\001\001\000\014\004\356\011\052\013\013\025\021\027" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\324\001\001\000\014\004\323" +
    "\011\052\013\013\025\021\027\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\222\011\052\013\013" +
    "\025\021\027\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\221\011\052\013\013\025\021\027\042" +
    "\001\001\000\014\004\220\011\052\013\013\025\021\027" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\174\001\001\000\004\037\215\001\001\000\014\004" +
    "\171\011\052\013\013\025\021\027\172\001\001\000\002" +
    "\001\001\000\004\034\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\163\011\052\013\013\025\021" +
    "\027\042\001\001\000\002\001\001\000\004\052\054\001" +
    "\001\000\006\010\056\024\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\062\001" +
    "\001\000\002\001\001\000\004\024\063\001\001\000\002" +
    "\001\001\000\004\013\123\001\001\000\014\004\066\011" +
    "\052\013\013\025\021\027\042\001\001\000\004\034\075" +
    "\001\001\000\014\004\120\011\052\013\013\025\021\027" +
    "\042\001\001\000\014\004\117\011\052\013\013\025\021" +
    "\027\042\001\001\000\014\004\116\011\052\013\013\025" +
    "\021\027\042\001\001\000\014\004\115\011\052\013\013" +
    "\025\021\027\042\001\001\000\014\004\114\011\052\013" +
    "\013\025\021\027\042\001\001\000\014\004\113\011\052" +
    "\013\013\025\021\027\042\001\001\000\004\061\111\001" +
    "\001\000\014\004\110\011\052\013\013\025\021\027\042" +
    "\001\001\000\014\004\107\011\052\013\013\025\021\027" +
    "\042\001\001\000\002\001\001\000\014\004\106\011\052" +
    "\013\013\025\021\027\042\001\001\000\014\004\105\011" +
    "\052\013\013\025\021\027\042\001\001\000\014\004\104" +
    "\011\052\013\013\025\021\027\042\001\001\000\004\034" +
    "\075\001\001\000\004\034\075\001\001\000\004\034\075" +
    "\001\001\000\004\034\075\001\001\000\004\034\075\001" +
    "\001\000\014\004\112\011\052\013\013\025\021\027\042" +
    "\001\001\000\004\034\075\001\001\000\004\034\075\001" +
    "\001\000\004\034\075\001\001\000\004\034\075\001\001" +
    "\000\004\034\075\001\001\000\004\034\075\001\001\000" +
    "\004\034\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\125\001\001\000\004\053" +
    "\132\001\001\000\004\013\127\001\001\000\002\001\001" +
    "\000\004\016\131\001\001\000\002\001\001\000\004\014" +
    "\133\001\001\000\002\001\001\000\004\054\135\001\001" +
    "\000\002\001\001\000\016\004\137\011\052\013\013\015" +
    "\140\025\021\027\042\001\001\000\004\034\075\001\001" +
    "\000\002\001\001\000\014\004\143\011\052\013\013\025" +
    "\021\027\042\001\001\000\002\001\001\000\004\034\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\157\011\052\013\013\025\021\027\042\001\001\000\016" +
    "\004\151\011\052\013\013\025\021\027\042\055\150\001" +
    "\001\000\002\001\001\000\004\034\075\001\001\000\004" +
    "\013\153\001\001\000\002\001\001\000\016\004\137\011" +
    "\052\013\013\015\155\025\021\027\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\075\001\001\000" +
    "\002\001\001\000\014\004\162\011\052\013\013\025\021" +
    "\027\042\001\001\000\004\034\075\001\001\000\004\034" +
    "\075\001\001\000\014\004\165\011\052\013\013\025\021" +
    "\027\042\001\001\000\004\034\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\075" +
    "\001\001\000\004\033\174\001\001\000\004\062\212\001" +
    "\001\000\004\056\203\001\001\000\002\001\001\000\004" +
    "\063\200\001\001\000\002\001\001\000\014\004\201\011" +
    "\052\013\013\025\021\027\202\001\001\000\004\034\075" +
    "\001\001\000\004\033\174\001\001\000\014\004\204\011" +
    "\052\013\013\025\021\027\042\001\001\000\006\034\075" +
    "\057\205\001\001\000\004\017\207\001\001\000\002\001" +
    "\001\000\004\060\210\001\001\000\014\004\211\011\052" +
    "\013\013\025\021\027\042\001\001\000\004\034\075\001" +
    "\001\000\014\004\201\011\052\013\013\025\021\027\213" +
    "\001\001\000\004\033\174\001\001\000\002\001\001\000" +
    "\004\002\216\001\001\000\036\003\022\004\046\006\011" +
    "\007\053\011\052\013\013\022\035\023\045\025\021\027" +
    "\042\030\027\031\023\032\033\035\031\001\001\000\002" +
    "\001\001\000\004\034\075\001\001\000\004\034\075\001" +
    "\001\000\004\034\075\001\001\000\014\004\225\011\224" +
    "\013\013\025\021\027\172\001\001\000\002\001\001\000" +
    "\006\034\075\045\226\001\001\000\002\001\001\000\014" +
    "\004\201\011\052\013\013\025\021\027\230\001\001\000" +
    "\006\033\174\046\231\001\001\000\002\001\001\000\014" +
    "\004\233\011\052\013\013\025\021\027\042\001\001\000" +
    "\004\034\075\001\001\000\004\047\235\001\001\000\036" +
    "\003\236\004\046\006\011\007\053\011\052\013\013\022" +
    "\035\023\045\025\021\027\042\030\027\031\023\032\033" +
    "\035\031\001\001\000\002\001\001\000\004\011\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\073\243" +
    "\001\001\000\036\003\244\004\046\006\011\007\053\011" +
    "\052\013\013\022\035\023\045\025\021\027\042\030\027" +
    "\031\023\032\033\035\031\001\001\000\002\001\001\000" +
    "\014\004\260\011\052\013\013\025\021\027\042\001\001" +
    "\000\014\004\247\011\052\013\013\025\021\027\042\001" +
    "\001\000\006\012\251\034\075\001\001\000\014\004\257" +
    "\011\052\013\013\025\021\027\042\001\001\000\004\031" +
    "\252\001\001\000\004\051\253\001\001\000\002\001\001" +
    "\000\036\003\255\004\046\006\011\007\053\011\052\013" +
    "\013\022\035\023\045\025\021\027\042\030\027\031\023" +
    "\032\033\035\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\075\001\001\000\006\012\261\034\075" +
    "\001\001\000\004\031\262\001\001\000\004\050\263\001" +
    "\001\000\002\001\001\000\036\003\265\004\046\006\011" +
    "\007\053\011\052\013\013\022\035\023\045\025\021\027" +
    "\042\030\027\031\023\032\033\035\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\270\011\052\013" +
    "\013\025\021\027\042\001\001\000\004\034\075\001\001" +
    "\000\004\064\272\001\001\000\002\001\001\000\004\020" +
    "\274\001\001\000\004\021\307\001\001\000\014\004\276" +
    "\011\052\013\013\025\021\027\042\001\001\000\006\034" +
    "\075\065\277\001\001\000\002\001\001\000\040\003\301" +
    "\004\046\006\011\007\053\011\052\013\013\022\035\023" +
    "\045\025\021\026\302\027\042\030\027\031\023\032\033" +
    "\035\031\001\001\000\002\001\001\000\004\036\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\311\001" +
    "\001\000\014\004\312\011\052\013\013\025\021\027\042" +
    "\001\001\000\006\034\075\067\313\001\001\000\002\001" +
    "\001\000\040\003\301\004\046\006\011\007\053\011\052" +
    "\013\013\022\035\023\045\025\021\026\315\027\042\030" +
    "\027\031\023\032\033\035\031\001\001\000\004\036\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\321\001\001\000\036\003\322\004\046\006\011\007\053" +
    "\011\052\013\013\022\035\023\045\025\021\027\042\030" +
    "\027\031\023\032\033\035\031\001\001\000\002\001\001" +
    "\000\004\034\075\001\001\000\002\001\001\000\014\004" +
    "\201\011\052\013\013\025\021\027\326\001\001\000\004" +
    "\033\174\001\001\000\004\043\330\001\001\000\036\003" +
    "\331\004\046\006\011\007\053\011\052\013\013\022\035" +
    "\023\045\025\021\027\042\030\027\031\023\032\033\035" +
    "\031\001\001\000\002\001\001\000\014\004\201\011\052" +
    "\013\013\025\021\027\333\001\001\000\004\033\174\001" +
    "\001\000\004\040\335\001\001\000\036\003\336\004\046" +
    "\006\011\007\053\011\052\013\013\022\035\023\045\025" +
    "\021\027\042\030\027\031\023\032\033\035\031\001\001" +
    "\000\004\041\337\001\001\000\004\005\341\001\001\000" +
    "\036\003\342\004\046\006\011\007\053\011\052\013\013" +
    "\022\035\023\045\025\021\027\042\030\027\031\023\032" +
    "\033\035\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\344\004\046\006\011\007\053\011\052\013" +
    "\013\022\035\023\045\025\021\027\042\030\027\031\023" +
    "\032\033\035\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\201\011\052\013\013\025\021\027\347" +
    "\001\001\000\004\033\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\353\011\052\013\013\025\021" +
    "\027\042\001\001\000\004\034\075\001\001\000\004\013" +
    "\355\001\001\000\002\001\001\000\004\034\075\001\001" +
    "\000\004\034\075\001\001\000\004\033\174\001\001\000" +
    "\014\004\370\011\052\013\013\025\021\027\042\001\001" +
    "\000\014\004\367\011\052\013\013\025\021\027\042\001" +
    "\001\000\014\004\366\011\052\013\013\025\021\027\042" +
    "\001\001\000\014\004\365\011\052\013\013\025\021\027" +
    "\042\001\001\000\004\034\075\001\001\000\004\034\075" +
    "\001\001\000\004\034\075\001\001\000\004\034\075\001" +
    "\001\000\006\010\373\024\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\376\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



//Para la declaracion de los arrays
  String arDec="";
  int arDecUSe=0;
  String arDecTemp="";

//Para el uso del operador ternario
  String askTemptp="";

//Para la sentencia switch
String swtVar="";
DoubleTag swtDTag;
boolean firstCase=true;
String swtFTag="";

//Para los punteros
  int pointerLevel=0;
  int pointerUse=0;
  
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // forEachSent ::= prFor AP idExp DP idExp CP NT$28 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		DoubleTag tag = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.GenGoto(tag.getV());
                                                            Generator.GenLabel(tag.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forEachSent",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$28 ::= 
            {
              String RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag tag = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenForEach(id1,id2,tag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // pointer ::= POR NT$27 pointer 
            {
              String RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=pt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pointer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$27 ::= 
            {
              String RESULT =null;
pointerUse+=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // pointer ::= POR idExp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pointerUse+=1;
                                                  RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pointer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // dec_pointer ::= POR NT$26 dec_pointer 
            {
              String RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_pointer",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$26 ::= 
            {
              String RESULT =null;
pointerLevel+=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // dec_pointer ::= POR IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pointerLevel+=1;
                                                  if(TS.isDeclared(id,false)){
                                                    TS.error(1);
                                                    }else{
                                                      TS.add(id,TS.auxType,false,"0",true,pointerLevel);
                                                      pointerLevel=0;
                                                      RESULT=id;
                                                      }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_pointer",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // prSwitch ::= SWITCH 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); firstCase=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prSwitch",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // op_sent ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_sent",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // op_sent ::= sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_sent",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // op_break ::= 
            {
              DoubleTag RESULT =null;
		swtDTag.setV(swtDTag.getF());
                                                  DoubleTag.updateTag(swtDTag,false);
                                                  Generator.GenGoto(swtDTag.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_break",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // op_break ::= BREAK PYC 
            {
              DoubleTag RESULT =null;
		swtDTag.setV(swtDTag.getF());
                                                  DoubleTag.updateTag(swtDTag,false);
                                                  Generator.GenGoto(swtFTag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_break",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // op_default ::= 
            {
              String RESULT =null;
		Generator.GenLabel(swtFTag);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_default",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // op_default ::= DEFAULT DP NT$25 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Generator.GenLabel(swtFTag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_default",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$25 ::= 
            {
              String RESULT =null;
Generator.GenLabel(swtDTag.getV());
                                                  Generator.GenLabel(swtDTag.getF());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // List_switch ::= List_switch CASE NT$23 exp NT$24 DP op_sent op_break 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_switch",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$24 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
swtDTag.setV(swtDTag.getF());
                                                 DoubleTag.updateTag(swtDTag,false);
                                                 Generator.GenCase(swtVar,n,swtDTag);
                                                 Generator.GenLabel(swtDTag.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$23 ::= 
            {
              String RESULT =null;
Generator.GenLabel(swtDTag.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // List_switch ::= CASE exp NT$22 DP op_sent op_break 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_switch",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$22 ::= 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!firstCase){
                                                   Generator.GenLabel(swtDTag.getV());
                                                   swtDTag.setV(swtDTag.getF());
                                                   DoubleTag.updateTag(swtDTag,false);
                                                   Generator.GenCase(swtVar,n,swtDTag);
                                                   Generator.GenLabel(swtDTag.getV());
                                                   }else{
                                                     swtFTag=swtDTag.getV();
                                                     firstCase=false;
                                                     Generator.GenCase(swtVar,n,swtDTag);
                                                   }  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // switchSent ::= prSwitch AP exp CP NT$21 ALL List_switch op_default CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DoubleTag sw = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchSent",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$21 ::= 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag sw = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
swtVar=e1;
                                                  swtDTag=sw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cond ::= AP cond CP 
            {
              DoubleTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cond ::= cond OR NT$20 cond 
            {
              DoubleTag RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (DoubleTag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenLabel(c1.getV());
                                                  Generator.GenGoto(c2.getV());
                                                  RESULT=c2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$20 ::= 
            {
              DoubleTag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c1.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cond ::= cond AND NT$19 cond 
            {
              DoubleTag RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (DoubleTag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenLabel(c1.getF());
                                                  Generator.GenGoto(c2.getF());
                                                  RESULT=c2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$19 ::= 
            {
              DoubleTag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c1.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cond ::= NOT cond 
            {
              DoubleTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String aux = c.getV();
                                                  c.setV(c.getF());
                                                  c.setF(aux);
                                                  RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cond ::= exp NEQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.NEQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cond ::= exp GT exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.GT,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cond ::= exp GEQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.GEQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cond ::= exp EQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.EQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cond ::= exp LEQ exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.LEQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cond ::= exp LT exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCond(e1,Generator.LT,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // varOrNum ::= NUM 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varOrNum",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // varOrNum ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!TS.isDeclared(id,false)){
                                                    TS.error(2);
                                                  }else{
                                                    RESULT=TS.varBlock(id);
                                                  } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varOrNum",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // idExp ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!TS.isDeclared(id,false)){
                                                   TS.error(2);
                                                 }else{
                                                   RESULT=TS.varBlock(id);
                                                 } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idExp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // prElvis ::= ELVIS 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prElvis",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // prDp ::= DP 
            {
              String RESULT =null;
		RESULT=Generator.newTag(askTemptp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // prAsk ::= ASK 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prAsk",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exp ::= CHANGECHAR exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenChangeChar(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exp ::= NOT exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenUpperOp(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp ::= CASTCHAR exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCast(3,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exp ::= CASTFLOAT exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCast(2,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp ::= CASTINT exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenCast(1,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp ::= CHARACTER 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=(String)c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp ::= pointer 
            {
              String RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenPointer(pt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp ::= pointer ASIG AMP varOrNum 
            {
              String RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(Generator.seeType(vn)<=2){
                                                    RESULT=Generator.GenAmpPoint(pt,vn,false,pointerUse);
                                                    pointerUse=0;
                                                  }else{
                                                    TS.error(0);
                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exp ::= idExp ASIG AMP varOrNum 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(Generator.seeType(vn)<=2){
                                                    RESULT=Generator.GenAmpPoint(id,vn,true,0);
                                                  }else{
                                                    TS.error(0);
                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp ::= pointer ASIG exp 
            {
              String RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenPointAsig(pt,e);
                                                  pointerUse=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp ::= exp prElvis NT$18 exp 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DoubleTag ev = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenAsig(RESULT,e2);
                                                  Generator.GenLabel(ev.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$18 ::= 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag ev = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT=Generator.newTag(Generator.basicType(e1));
                                                  Generator.GenAsig(RESULT,e1);
                                                  PLXC.out.println("   if ("+e1+" != 0) goto "+ev.getV()+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp ::= cond prAsk NT$15 exp NT$16 prDp NT$17 exp 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DoubleTag a = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenAsig(dp,e2);
                                                  Generator.GenLabel(a.getV());
                                                  RESULT=dp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$17 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag a = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenAsig(dp,e1);
                                                  Generator.GenGoto(a.getV());
                                                  Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$16 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DoubleTag a = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
askTemptp=Generator.basicType(e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$15 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag a = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp ::= varOrNum DIVEQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.DIVEQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp ::= varOrNum POREQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.POREQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= varOrNum MENOSEQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.MENOSEQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= varOrNum MASEQ exp 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenUnicOper(vn,Generator.MASEQ,e);
                                                  RESULT=vn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= idExp ASIG NT$14 ALL arExp CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String temp2=Generator.newTag(TS.auxType);
                                                  Generator.GenInitArrayPart2(arDecTemp,temp2,arDec,arDecUSe,true);
                                                  RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$14 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Node nod =TS.getNode(id);
                                                    if(!nod.getIsArray()){
                                                      TS.error(3);
                                                      }else{
                                                        arDec=id;
                                                        arDecUSe=0;
                                                        }
                                                arDecTemp=Generator.newTag(TS.auxType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= idExp AC exp CC ASIG exp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenAsigArray(id,e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= idExp AC exp CC 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String temp = Generator.newTag("");
                                                  Generator.GenUseVarArray(id,e,temp);
                                                  RESULT=temp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= RNUM 
            {
              String RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String rn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=rn; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= NUM 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= idExp MENOSMENOS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),false,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= MENOSMENOS idExp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),true,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= idExp MASMAS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),false,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= MASMAS idExp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenIncDec(TS.varBlock(id),true,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= idExp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= AP exp CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= idExp ASIG exp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=Generator.GenAsig(TS.varBlock(id),e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= MENOS exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(null,Generator.MENOSUNARIO,e,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp MOD exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  RESULT=Generator.GenBinOper(e1,Generator.MOD,e2,temp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp DIV exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.DIV,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp POR exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.POR,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp MENOS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.MENOS,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp MAS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp = Generator.newTag("");
                                                  Generator.GenBinOper(e1,Generator.MAS,e2,temp);
                                                  RESULT=temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= CHAR 
            {
              String RESULT =null;
		RESULT="CHAR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= FLOAT 
            {
              String RESULT =null;
		RESULT="FLOAT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= INT 
            {
              String RESULT =null;
		RESULT="INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arExp ::= exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenInitArray(arDec,arDecTemp,arDecUSe,e);
                                                  arDecUSe++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arExp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arExp ::= arExp COMA exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.GenInitArray(arDec,arDecTemp,arDecUSe,e);
                                                  arDecUSe++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arExp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arrayInit ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arrayInit ::= ASIG NT$13 ALL arExp CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String temp2=Generator.newTag(TS.auxType);
                                                  Generator.GenInitArrayPart2(arDecTemp,temp2,arDec,arDecUSe,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$13 ::= 
            {
              String RESULT =null;
arDecTemp=Generator.newTag(TS.auxType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // moreDim ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("moreDim",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // moreDim ::= AC varOrNum CC moreDim 
            {
              String RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("moreDim",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable ::= dec_pointer 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable ::= IDENT AC varOrNum CC moreDim NT$12 arrayInit 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		PLXC.out.println("   $"+id+"_length = "+vn+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$12 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(Generator.seeType(vn)==1){
                                                     TS.error(0);
                                                   }
                                                   if(TS.isDeclared(id,true)){
                                                   TS.error(1);
                                                   }else{
                                                    TS.add(id,TS.auxType,true,vn,false,0);
                                                    RESULT=id;
                                                    arDec=id;
                                                    arDecUSe=0;
                                                   } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable ::= IDENT ASIG exp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(TS.isDeclared(id,true)){
                                                    TS.error(1);
                                                    }else{
                                                      TS.add(id,TS.auxType,false,"0",false,0);
                                                      RESULT=Generator.GenAsig(TS.varBlock(id),e);
                                                    }  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(TS.isDeclared(id,true)){
                                                   TS.error(1);
                                                   }else{
                                                     TS.add(id,TS.auxType,false,"0",false,0);
                                                     RESULT=id;
                                                   } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // List_var_dec ::= List_var_dec COMA variable 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_var_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // List_var_dec ::= type NT$11 variable 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_var_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$11 ::= 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
TS.auxType=tp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // prStep ::= 
            {
              String RESULT =null;
		RESULT="1"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prStep",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // prStep ::= STEP exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prStep",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // prFor ::= FOR 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // prDo ::= DO 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // prWhile ::= WHILE 
            {
              DoubleTag RESULT =null;
		RESULT=new DoubleTag(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prWhile",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // part_else ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_else",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // part_else ::= ELSE sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_else",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sent ::= forEachSent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent ::= switchSent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent ::= COMMENT 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent ::= prFor exp DOWNTO exp prStep prDo NT$10 ALL sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Generator.GenGoto(aux.getF());
                                                 Generator.GenLabel(aux2.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV());
                                                Generator.GenCondForDownTo(e1,e2,aux2,true);
                                                Generator.GenLabel(aux.getF());
                                                Generator.GenBinOper(e1,Generator.MENOS,step,e1);
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(aux2.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent ::= prFor exp TO exp prStep prDo NT$9 ALL sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Generator.GenGoto(aux.getF());
                                                Generator.GenLabel(aux2.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String step = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV());
                                                Generator.GenCondForDownTo(e1,e2,aux2,false);
                                                Generator.GenLabel(aux.getF());
                                                Generator.GenBinOper(e1,Generator.MAS,step,e1);
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(aux2.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent ::= prFor AP exp NT$6 PYC cond NT$7 PYC exp CP NT$8 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.GenGoto(aux.getF());
                                                Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$6 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sent ::= prDo NT$5 sent WHILE AP cond CP PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Generator.GenLabel(c.getV());
                                                Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$5 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent ::= prWhile NT$3 AP cond CP NT$4 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.GenGoto(aux.getV());
                                                Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag aux = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.GenLabel(aux.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= IF AP cond CP NT$1 sent NT$2 part_else 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Generator.GenLabel(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
c.setV(c.getF());
                                                c.setF(DoubleTag.newTag());
                                                Generator.GenGoto(c.getF());
                                                Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.GenLabel(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= ALL NT$0 List_sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TS.oldBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              String RESULT =null;
TS.newBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= PRINT AP exp CP PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Generator.GenPrint(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= List_var_dec PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= exp PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // List_sent ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= List_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // List_sent ::= List_sent sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

